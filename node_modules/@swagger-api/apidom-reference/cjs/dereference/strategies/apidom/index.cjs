"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
<<<<<<< HEAD
var _ramda = require("ramda");
=======
>>>>>>> master
var _apidomCore = require("@swagger-api/apidom-core");
var _DereferenceStrategy = _interopRequireDefault(require("../DereferenceStrategy.cjs"));
var _Reference = _interopRequireDefault(require("../../../Reference.cjs"));
var _ReferenceSet = _interopRequireDefault(require("../../../ReferenceSet.cjs"));
var _visitor = _interopRequireDefault(require("./visitor.cjs"));
// @ts-ignore
const visitAsync = _apidomCore.visit[Symbol.for('nodejs.util.promisify.custom')];
const ApiDOMDereferenceStrategy = (0, _stampit.default)(_DereferenceStrategy.default, {
  init() {
    this.name = 'apidom';
  },
  methods: {
    canDereference(file) {
      var _file$parseResult;
      return file.mediaType.startsWith('application/vnd.apidom') && (0, _apidomCore.isElement)((_file$parseResult = file.parseResult) == null ? void 0 : _file$parseResult.result);
    },
    async dereference(file, options) {
<<<<<<< HEAD
      var _options$dereference$, _options$dereference$2;
      let refSet = (0, _ramda.defaultTo)((0, _ReferenceSet.default)(), options.dereference.refSet);
      let reference;

      // determine the initial reference
      if (!refSet.has(file.uri)) {
=======
      var _options$dereference$;
      const immutableRefSet = (_options$dereference$ = options.dereference.refSet) != null ? _options$dereference$ : (0, _ReferenceSet.default)();
      const mutableRefsSet = (0, _ReferenceSet.default)();
      let refSet = immutableRefSet;
      let reference;

      // determine the initial reference
      if (!immutableRefSet.has(file.uri)) {
>>>>>>> master
        reference = (0, _Reference.default)({
          uri: file.uri,
          value: file.parseResult
        });
<<<<<<< HEAD
        refSet.add(reference);
      } else {
        // pre-computed refSet was provided as configuration option
        reference = refSet.find((0, _ramda.propEq)(file.uri, 'uri'));
      }

      // clone reference set due the dereferencing process being mutable
      if (typeof ((_options$dereference$ = options.dereference.strategyOpts.apidom) == null ? void 0 : _options$dereference$.clone) === 'undefined' || (_options$dereference$2 = options.dereference.strategyOpts.apidom) != null && _options$dereference$2.clone) {
        const refsCopy = [...refSet.refs].map(ref => {
          return (0, _Reference.default)({
            ...ref,
            value: (0, _apidomCore.cloneDeep)(ref.value)
          });
        });
        refSet = (0, _ReferenceSet.default)({
          refs: refsCopy
        });
        reference = refSet.find((0, _ramda.propEq)(file.uri, 'uri'));
=======
        immutableRefSet.add(reference);
      } else {
        // pre-computed refSet was provided as configuration option
        reference = immutableRefSet.find(ref => ref.uri === file.uri);
      }

      /**
       * Clone refSet due the dereferencing process being mutable.
       * We don't want to mutate the original refSet and the references.
       */
      if (options.dereference.immutable) {
        immutableRefSet.refs.map(ref => (0, _Reference.default)({
          ...ref,
          value: (0, _apidomCore.cloneDeep)(ref.value)
        })).forEach(ref => mutableRefsSet.add(ref));
        reference = mutableRefsSet.find(ref => ref.uri === file.uri);
        refSet = mutableRefsSet;
>>>>>>> master
      }
      const visitor = (0, _visitor.default)({
        reference,
        options
      });
      const dereferencedElement = await visitAsync(refSet.rootRef.value, visitor);

      /**
<<<<<<< HEAD
       * Release all memory if this refSet was not provided as an configuration option.
       * If provided as configuration option, then provider is responsible for cleanup.
       */
      if (options.dereference.refSet === null) {
        refSet.clean();
      }
=======
       * If immutable option is set, replay refs from the refSet.
       */
      if (options.dereference.immutable) {
        mutableRefsSet.refs.filter(ref => ref.uri.startsWith('immutable://')).map(ref => (0, _Reference.default)({
          ...ref,
          uri: ref.uri.replace(/^immutable:\/\//, '')
        })).forEach(ref => immutableRefSet.add(ref));
        reference = immutableRefSet.find(ref => ref.uri === file.uri);
        refSet = immutableRefSet;
      }

      /**
       * Release all memory if this refSet was not provided as a configuration option.
       * If provided as configuration option, then provider is responsible for cleanup.
       */
      if (options.dereference.refSet === null) {
        immutableRefSet.clean();
      }
      mutableRefsSet.clean();
>>>>>>> master
      return dereferencedElement;
    }
  }
});
var _default = exports.default = ApiDOMDereferenceStrategy;