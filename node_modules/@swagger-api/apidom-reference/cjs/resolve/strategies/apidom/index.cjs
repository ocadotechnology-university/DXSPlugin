"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
<<<<<<< HEAD
var _apidomCore = require("@swagger-api/apidom-core");
var _ResolveStrategy = _interopRequireDefault(require("../ResolveStrategy.cjs"));
var _ReferenceSet = _interopRequireDefault(require("../../../ReferenceSet.cjs"));
var _Reference = _interopRequireDefault(require("../../../Reference.cjs"));
var _util = require("../../../options/util.cjs");
var _visitor = _interopRequireDefault(require("./visitor.cjs"));
// @ts-ignore
const visitAsync = _apidomCore.visit[Symbol.for('nodejs.util.promisify.custom')];
=======
var _ResolveStrategy = _interopRequireDefault(require("../ResolveStrategy.cjs"));
var _ReferenceSet = _interopRequireDefault(require("../../../ReferenceSet.cjs"));
var _util = require("../../../options/util.cjs");
var _UnmatchedDereferenceStrategyError = _interopRequireDefault(require("../../../errors/UnmatchedDereferenceStrategyError.cjs"));
>>>>>>> master
const ApiDOMResolveStrategy = (0, _stampit.default)(_ResolveStrategy.default, {
  init() {
    this.name = 'apidom';
  },
  methods: {
<<<<<<< HEAD
    canResolve(file) {
      var _file$parseResult;
      return file.mediaType.startsWith('application/vnd.apidom') && (0, _apidomCore.isElement)((_file$parseResult = file.parseResult) == null ? void 0 : _file$parseResult.result);
    },
    async resolve(file, options) {
      var _options$resolve$stra;
      const referenceValue = (_options$resolve$stra = options.resolve.strategyOpts.apidom) != null && _options$resolve$stra.clone ? (0, _apidomCore.cloneDeep)(file.parseResult) : file.parseResult;
      const reference = (0, _Reference.default)({
        uri: file.uri,
        value: referenceValue
      });
      const mergedOptions = (0, _util.merge)(options, {
        resolve: {
          internal: false
        }
      });
      const visitor = (0, _visitor.default)({
        reference,
        options: mergedOptions
      });
      const refSet = (0, _ReferenceSet.default)();
      refSet.add(reference);
      await visitAsync(refSet.rootRef.value, visitor);
=======
    canResolve(file, options) {
      const dereferenceStrategy = options.dereference.strategies.find(strategy => strategy.name === 'apidom');
      if (dereferenceStrategy === undefined) {
        return false;
      }
      return dereferenceStrategy.canDereference(file, options);
    },
    async resolve(file, options) {
      const dereferenceStrategy = options.dereference.strategies.find(strategy => strategy.name === 'apidom');
      if (dereferenceStrategy === undefined) {
        throw new _UnmatchedDereferenceStrategyError.default('"apidom" dereference strategy is not available.');
      }
      const refSet = (0, _ReferenceSet.default)();
      const mergedOptions = (0, _util.merge)(options, {
        resolve: {
          internal: false
        },
        dereference: {
          refSet
        }
      });
      await dereferenceStrategy.dereference(file, mergedOptions);
>>>>>>> master
      return refSet;
    }
  }
});
var _default = exports.default = ApiDOMResolveStrategy;