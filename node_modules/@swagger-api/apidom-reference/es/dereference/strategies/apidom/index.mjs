import stampit from 'stampit';
import { defaultTo, propEq } from 'ramda';
import { isElement, cloneDeep, visit } from '@swagger-api/apidom-core';
import DereferenceStrategy from "../DereferenceStrategy.mjs";
import Reference from "../../../Reference.mjs";
import ReferenceSet from "../../../ReferenceSet.mjs";
import ApiDOMDereferenceVisitor from "./visitor.mjs"; // @ts-ignore
const visitAsync = visit[Symbol.for('nodejs.util.promisify.custom')];
const ApiDOMDereferenceStrategy = stampit(DereferenceStrategy, {
  init() {
    this.name = 'apidom';
  },
  methods: {
    canDereference(file) {
      var _file$parseResult;
      return file.mediaType.startsWith('application/vnd.apidom') && isElement((_file$parseResult = file.parseResult) === null || _file$parseResult === void 0 ? void 0 : _file$parseResult.result);
    },
    async dereference(file, options) {
      var _options$dereference$, _options$dereference$2;
      let refSet = defaultTo(ReferenceSet(), options.dereference.refSet);
      let reference;

      // determine the initial reference
      if (!refSet.has(file.uri)) {
        reference = Reference({
          uri: file.uri,
          value: file.parseResult
        });
        refSet.add(reference);
      } else {
        // pre-computed refSet was provided as configuration option
        reference = refSet.find(propEq(file.uri, 'uri'));
      }

      // clone reference set due the dereferencing process being mutable
      if (typeof ((_options$dereference$ = options.dereference.strategyOpts.apidom) === null || _options$dereference$ === void 0 ? void 0 : _options$dereference$.clone) === 'undefined' || (_options$dereference$2 = options.dereference.strategyOpts.apidom) !== null && _options$dereference$2 !== void 0 && _options$dereference$2.clone) {
        const refsCopy = [...refSet.refs].map(ref => {
          return Reference({
            ...ref,
            value: cloneDeep(ref.value)
          });
        });
        refSet = ReferenceSet({
          refs: refsCopy
        });
        reference = refSet.find(propEq(file.uri, 'uri'));
      }
      const visitor = ApiDOMDereferenceVisitor({
        reference,
        options
      });
      const dereferencedElement = await visitAsync(refSet.rootRef.value, visitor);

      /**
       * Release all memory if this refSet was not provided as an configuration option.
       * If provided as configuration option, then provider is responsible for cleanup.
       */
      if (options.dereference.refSet === null) {
        refSet.clean();
      }
      return dereferencedElement;
    }
  }
});
export default ApiDOMDereferenceStrategy;