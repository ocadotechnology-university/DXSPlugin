import stampit from 'stampit';
<<<<<<< HEAD
import { isElement, visit, cloneDeep } from '@swagger-api/apidom-core';
import ResolveStrategy from "../ResolveStrategy.mjs";
import ReferenceSet from "../../../ReferenceSet.mjs";
import Reference from "../../../Reference.mjs";
import { merge as mergeOptions } from "../../../options/util.mjs";
import ApiDOMResolveVisitor from "./visitor.mjs"; // @ts-ignore
const visitAsync = visit[Symbol.for('nodejs.util.promisify.custom')];
=======
import ResolveStrategy from "../ResolveStrategy.mjs";
import ReferenceSet from "../../../ReferenceSet.mjs";
import { merge as mergeOptions } from "../../../options/util.mjs";
import UnmatchedDereferenceStrategyError from "../../../errors/UnmatchedDereferenceStrategyError.mjs";
>>>>>>> master
const ApiDOMResolveStrategy = stampit(ResolveStrategy, {
  init() {
    this.name = 'apidom';
  },
  methods: {
<<<<<<< HEAD
    canResolve(file) {
      var _file$parseResult;
      return file.mediaType.startsWith('application/vnd.apidom') && isElement((_file$parseResult = file.parseResult) === null || _file$parseResult === void 0 ? void 0 : _file$parseResult.result);
    },
    async resolve(file, options) {
      var _options$resolve$stra;
      const referenceValue = (_options$resolve$stra = options.resolve.strategyOpts.apidom) !== null && _options$resolve$stra !== void 0 && _options$resolve$stra.clone ? cloneDeep(file.parseResult) : file.parseResult;
      const reference = Reference({
        uri: file.uri,
        value: referenceValue
      });
      const mergedOptions = mergeOptions(options, {
        resolve: {
          internal: false
        }
      });
      const visitor = ApiDOMResolveVisitor({
        reference,
        options: mergedOptions
      });
      const refSet = ReferenceSet();
      refSet.add(reference);
      await visitAsync(refSet.rootRef.value, visitor);
=======
    canResolve(file, options) {
      const dereferenceStrategy = options.dereference.strategies.find(strategy => strategy.name === 'apidom');
      if (dereferenceStrategy === undefined) {
        return false;
      }
      return dereferenceStrategy.canDereference(file, options);
    },
    async resolve(file, options) {
      const dereferenceStrategy = options.dereference.strategies.find(strategy => strategy.name === 'apidom');
      if (dereferenceStrategy === undefined) {
        throw new UnmatchedDereferenceStrategyError('"apidom" dereference strategy is not available.');
      }
      const refSet = ReferenceSet();
      const mergedOptions = mergeOptions(options, {
        resolve: {
          internal: false
        },
        dereference: {
          refSet
        }
      });
      await dereferenceStrategy.dereference(file, mergedOptions);
>>>>>>> master
      return refSet;
    }
  }
});
export default ApiDOMResolveStrategy;