<<<<<<< HEAD
{"version":3,"file":"index.umd.js","sources":["index.module.js","../index.cjs.tsx"],"sourcesContent":["import*as e from\"react\";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},n.apply(this,arguments)}var r,t,i=[\"children\",\"options\"];!function(e){e.blockQuote=\"0\",e.breakLine=\"1\",e.breakThematic=\"2\",e.codeBlock=\"3\",e.codeFenced=\"4\",e.codeInline=\"5\",e.footnote=\"6\",e.footnoteReference=\"7\",e.gfmTask=\"8\",e.heading=\"9\",e.headingSetext=\"10\",e.htmlBlock=\"11\",e.htmlComment=\"12\",e.htmlSelfClosing=\"13\",e.image=\"14\",e.link=\"15\",e.linkAngleBraceStyleDetector=\"16\",e.linkBareUrlDetector=\"17\",e.linkMailtoDetector=\"18\",e.newlineCoalescer=\"19\",e.orderedList=\"20\",e.paragraph=\"21\",e.ref=\"22\",e.refImage=\"23\",e.refLink=\"24\",e.table=\"25\",e.tableSeparator=\"26\",e.text=\"27\",e.textBolded=\"28\",e.textEmphasized=\"29\",e.textEscaped=\"30\",e.textMarked=\"31\",e.textStrikethroughed=\"32\",e.unorderedList=\"33\"}(r||(r={})),function(e){e[e.MAX=0]=\"MAX\",e[e.HIGH=1]=\"HIGH\",e[e.MED=2]=\"MED\",e[e.LOW=3]=\"LOW\",e[e.MIN=4]=\"MIN\"}(t||(t={}));var a=[\"allowFullScreen\",\"allowTransparency\",\"autoComplete\",\"autoFocus\",\"autoPlay\",\"cellPadding\",\"cellSpacing\",\"charSet\",\"className\",\"classId\",\"colSpan\",\"contentEditable\",\"contextMenu\",\"crossOrigin\",\"encType\",\"formAction\",\"formEncType\",\"formMethod\",\"formNoValidate\",\"formTarget\",\"frameBorder\",\"hrefLang\",\"inputMode\",\"keyParams\",\"keyType\",\"marginHeight\",\"marginWidth\",\"maxLength\",\"mediaGroup\",\"minLength\",\"noValidate\",\"radioGroup\",\"readOnly\",\"rowSpan\",\"spellCheck\",\"srcDoc\",\"srcLang\",\"srcSet\",\"tabIndex\",\"useMap\"].reduce(function(e,n){return e[n.toLowerCase()]=n,e},{for:\"htmlFor\"}),c={amp:\"&\",apos:\"'\",gt:\">\",lt:\"<\",nbsp:\" \",quot:\"“\"},o=[\"style\",\"script\"],l=/([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,u=/mailto:/i,s=/\\n{2,}$/,f=/^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,d=/^ *> ?/gm,p=/^ {2,}\\n/,h=/^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,m=/^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/,g=/^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,y=/^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,k=/^(?:\\n *)*\\n/,v=/\\r\\n?/g,x=/^\\[\\^([^\\]]+)](:.*)\\n/,b=/^\\[\\^([^\\]]+)]/,S=/\\f/g,w=/^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,C=/^\\s*?\\[(x|\\s)\\]/,E=/^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,$=/^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,A=/^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,O=/^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,T=/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,L=/^<!--[\\s\\S]*?(?:-->)/,z=/^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,M=/^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,I=/^\\{.*\\}$/,R=/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,U=/^<([^ >]+@[^ >]+)>/,j=/^<([^ >]+:\\/[^ >]+)>/,B=/-([a-z])?/gi,N=/^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,H=/^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,D=/^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,P=/^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,_=/(\\[|\\])/g,F=/(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,W=/\\t/g,G=/^ *\\| */,Z=/(^ *\\||\\| *$)/g,q=/ *$/,V=/^ *:-+: *$/,X=/^ *:-+ *$/,Q=/^ *-+: *$/,J=/^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,K=/^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,Y=/^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,ee=/^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,ne=/^\\\\([^0-9A-Za-z\\s])/,re=/^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,te=/^\\n+/,ie=/^([ \\t]*)/,ae=/\\\\([^\\\\])/g,ce=/ *\\n+$/,oe=/(?:^|\\n)( *)$/,le=\"(?:\\\\d+\\\\.)\",ue=\"(?:[*+-])\";function se(e){return\"( *)(\"+(1===e?le:ue)+\") +\"}var fe=se(1),de=se(2);function pe(e){return new RegExp(\"^\"+(1===e?fe:de))}var he=pe(1),me=pe(2);function ge(e){return new RegExp(\"^\"+(1===e?fe:de)+\"[^\\\\n]*(?:\\\\n(?!\\\\1\"+(1===e?le:ue)+\" )[^\\\\n]*)*(\\\\n|$)\",\"gm\")}var ye=ge(1),ke=ge(2);function ve(e){var n=1===e?le:ue;return new RegExp(\"^( *)(\"+n+\") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\"+n+\" (?!\"+n+\" ))\\\\n*|\\\\s*\\\\n*$)\")}var xe=ve(1),be=ve(2);function Se(e,n){var r=1===n,t=r?xe:be,i=r?ye:ke,a=r?he:me;return{match:function(e,n,r){var i=oe.exec(r);return i&&(n.list||!n.inline&&!n.simple)?t.exec(e=i[1]+e):null},order:1,parse:function(e,n,t){var c=r?+e[2]:void 0,o=e[0].replace(s,\"\\n\").match(i),l=!1;return{items:o.map(function(e,r){var i=a.exec(e)[0].length,c=new RegExp(\"^ {1,\"+i+\"}\",\"gm\"),u=e.replace(c,\"\").replace(a,\"\"),s=r===o.length-1,f=-1!==u.indexOf(\"\\n\\n\")||s&&l;l=f;var d,p=t.inline,h=t.list;t.list=!0,f?(t.inline=!1,d=u.replace(ce,\"\\n\\n\")):(t.inline=!0,d=u.replace(ce,\"\"));var m=n(d,t);return t.inline=p,t.list=h,m}),ordered:r,start:c}},render:function(n,r,t){return e(n.ordered?\"ol\":\"ul\",{key:t.key,start:\"20\"===n.type?n.start:void 0},n.items.map(function(n,i){return e(\"li\",{key:i},r(n,t))}))}}}var we=/^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,Ce=/^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,Ee=[f,m,g,E,A,$,L,N,ye,xe,ke,be],$e=[].concat(Ee,[/^[^\\n]+(?:  \\n|\\n{2,})/,O,M]);function Ae(e){return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g,\"a\").replace(/[çÇ]/g,\"c\").replace(/[ðÐ]/g,\"d\").replace(/[ÈÉÊËéèêë]/g,\"e\").replace(/[ÏïÎîÍíÌì]/g,\"i\").replace(/[Ññ]/g,\"n\").replace(/[øØœŒÕõÔôÓóÒò]/g,\"o\").replace(/[ÜüÛûÚúÙù]/g,\"u\").replace(/[ŸÿÝý]/g,\"y\").replace(/[^a-z0-9- ]/gi,\"\").replace(/ /gi,\"-\").toLowerCase()}function Oe(e){return Q.test(e)?\"right\":V.test(e)?\"center\":X.test(e)?\"left\":null}function Te(e,n,r){var t=r.inTable;r.inTable=!0;var i=n(e.trim(),r);r.inTable=t;var a=[[]];return i.forEach(function(e,n){\"26\"===e.type?0!==n&&n!==i.length-1&&a.push([]):(\"27\"!==e.type||null!=i[n+1]&&\"26\"!==i[n+1].type||(e.text=e.text.replace(q,\"\")),a[a.length-1].push(e))}),a}function Le(e,n,r){r.inline=!0;var t=Te(e[1],n,r),i=e[2].replace(Z,\"\").split(\"|\").map(Oe),a=function(e,n,r){return e.trim().split(\"\\n\").map(function(e){return Te(e,n,r)})}(e[3],n,r);return r.inline=!1,{align:i,cells:a,header:t,type:\"25\"}}function ze(e,n){return null==e.align[n]?{}:{textAlign:e.align[n]}}function Me(e){return function(n,r){return r.inline?e.exec(n):null}}function Ie(e){return function(n,r){return r.inline||r.simple?e.exec(n):null}}function Re(e){return function(n,r){return r.inline||r.simple?null:e.exec(n)}}function Ue(e){return function(n){return e.exec(n)}}function je(e,n,r){if(n.inline||n.simple)return null;if(r&&!r.endsWith(\"\\n\"))return null;var t=\"\";e.split(\"\\n\").every(function(e){return!Ee.some(function(n){return n.test(e)})&&(t+=e+\"\\n\",e.trim())});var i=t.trimEnd();return\"\"==i?null:[t,i]}function Be(e){try{if(decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,\"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i))return}catch(e){return null}return e}function Ne(e){return e.replace(ae,\"$1\")}function He(e,n,r){var t=r.inline||!1,i=r.simple||!1;r.inline=!0,r.simple=!0;var a=e(n,r);return r.inline=t,r.simple=i,a}function De(e,n,r){var t=r.inline||!1,i=r.simple||!1;r.inline=!1,r.simple=!0;var a=e(n,r);return r.inline=t,r.simple=i,a}function Pe(e,n,r){return r.inline=!1,e(n,r)}var _e=function(e,n,r){return{children:He(n,e[1],r)}};function Fe(){return{}}function We(){return null}function Ge(){return[].slice.call(arguments).filter(Boolean).join(\" \")}function Ze(e,n,r){for(var t=e,i=n.split(\".\");i.length&&void 0!==(t=t[i[0]]);)i.shift();return t||r}function qe(e,n){var r=Ze(n,e);return r?\"function\"==typeof r||\"object\"==typeof r&&\"render\"in r?r:Ze(n,e+\".component\",e):e}function Ve(r,t){var i;void 0===t&&(t={}),t.overrides=t.overrides||{},t.slugify=t.slugify||Ae,t.namedCodesToUnicode=t.namedCodesToUnicode?n({},c,t.namedCodesToUnicode):c;var s=t.createElement||e.createElement;function Z(e,r){var i=Ze(t.overrides,e+\".props\",{});return s.apply(void 0,[qe(e,t.overrides),n({},r,i,{className:Ge(null==r?void 0:r.className,i.className)||void 0})].concat([].slice.call(arguments,2)))}function q(n){n=n.replace(w,\"\");var r=!1;t.forceInline?r=!0:t.forceBlock||(r=!1===F.test(n));for(var i=le(oe(r?n:n.trimEnd().replace(te,\"\")+\"\\n\\n\",{inline:r}));\"string\"==typeof i[i.length-1]&&!i[i.length-1].trim();)i.pop();if(null===t.wrapper)return i;var a,c=t.wrapper||(r?\"span\":\"div\");if(i.length>1||t.forceWrapper)a=i;else{if(1===i.length)return\"string\"==typeof(a=i[0])?Z(\"span\",{key:\"outer\"},a):a;a=null}return e.createElement(c,{key:\"outer\"},a)}function V(n){var r=n.match(l);return r?r.reduce(function(n,r,t){var i=r.indexOf(\"=\");if(-1!==i){var c=function(e){return-1!==e.indexOf(\"-\")&&null===e.match(z)&&(e=e.replace(B,function(e,n){return n.toUpperCase()})),e}(r.slice(0,i)).trim(),o=function(e){var n=e[0];return('\"'===n||\"'\"===n)&&e.length>=2&&e[e.length-1]===n?e.slice(1,-1):e}(r.slice(i+1).trim()),l=a[c]||c,u=n[l]=function(e,n){return\"style\"===e?n.split(/;\\s?/).reduce(function(e,n){var r=n.slice(0,n.indexOf(\":\"));return e[r.replace(/(-[a-z])/g,function(e){return e[1].toUpperCase()})]=n.slice(r.length+1).trim(),e},{}):\"href\"===e||\"src\"===e?Be(n):(n.match(I)&&(n=n.slice(1,n.length-1)),\"true\"===n||\"false\"!==n&&n)}(c,o);\"string\"==typeof u&&(O.test(u)||M.test(u))&&(n[l]=e.cloneElement(q(u.trim()),{key:t}))}else\"style\"!==r&&(n[a[r]||r]=!0);return n},{}):null}var X=[],Q={},ae=((i={})[0]={match:Re(f),order:1,parse:function(e,n,r){return{children:n(e[0].replace(d,\"\"),r)}},render:function(e,n,r){return Z(\"blockquote\",{key:r.key},n(e.children,r))}},i[1]={match:Ue(p),order:1,parse:Fe,render:function(e,n,r){return Z(\"br\",{key:r.key})}},i[2]={match:Re(h),order:1,parse:Fe,render:function(e,n,r){return Z(\"hr\",{key:r.key})}},i[3]={match:Re(g),order:0,parse:function(e){return{lang:void 0,text:e[0].replace(/^ {4}/gm,\"\").replace(/\\n+$/,\"\")}},render:function(e,r,t){return Z(\"pre\",{key:t.key},Z(\"code\",n({},e.attrs,{className:e.lang?\"lang-\"+e.lang:\"\"}),e.text))}},i[4]={match:Re(m),order:0,parse:function(e){return{attrs:V(e[3]||\"\"),lang:e[2]||void 0,text:e[4],type:\"3\"}}},i[5]={match:Ie(y),order:3,parse:function(e){return{text:e[2]}},render:function(e,n,r){return Z(\"code\",{key:r.key},e.text)}},i[6]={match:Re(x),order:0,parse:function(e){return X.push({footnote:e[2],identifier:e[1]}),{}},render:We},i[7]={match:Me(b),order:1,parse:function(e){return{target:\"#\"+t.slugify(e[1]),text:e[1]}},render:function(e,n,r){return Z(\"a\",{key:r.key,href:Be(e.target)},Z(\"sup\",{key:r.key},e.text))}},i[8]={match:Me(C),order:1,parse:function(e){return{completed:\"x\"===e[1].toLowerCase()}},render:function(e,n,r){return Z(\"input\",{checked:e.completed,key:r.key,readOnly:!0,type:\"checkbox\"})}},i[9]={match:Re(t.enforceAtxHeadings?$:E),order:1,parse:function(e,n,r){return{children:He(n,e[2],r),id:t.slugify(e[2]),level:e[1].length}},render:function(e,n,r){return Z(\"h\"+e.level,{id:e.id,key:r.key},n(e.children,r))}},i[10]={match:Re(A),order:0,parse:function(e,n,r){return{children:He(n,e[1],r),level:\"=\"===e[2]?1:2,type:\"9\"}}},i[11]={match:Ue(O),order:1,parse:function(e,n,r){var t,i=e[3].match(ie),a=new RegExp(\"^\"+i[1],\"gm\"),c=e[3].replace(a,\"\"),l=(t=c,$e.some(function(e){return e.test(t)})?Pe:He),u=e[1].toLowerCase(),s=-1!==o.indexOf(u),f={attrs:V(e[2]),noInnerParse:s,tag:s?u:e[1]};return r.inAnchor=r.inAnchor||\"a\"===u,s?f.text=e[3]:f.children=l(n,c,r),r.inAnchor=!1,f},render:function(e,r,t){return Z(e.tag,n({key:t.key},e.attrs),e.text||r(e.children,t))}},i[13]={match:Ue(M),order:1,parse:function(e){return{attrs:V(e[2]||\"\"),tag:e[1]}},render:function(e,r,t){return Z(e.tag,n({},e.attrs,{key:t.key}))}},i[12]={match:Ue(L),order:1,parse:function(){return{}},render:We},i[14]={match:Ie(Ce),order:1,parse:function(e){return{alt:e[1],target:Ne(e[2]),title:e[3]}},render:function(e,n,r){return Z(\"img\",{key:r.key,alt:e.alt||void 0,title:e.title||void 0,src:Be(e.target)})}},i[15]={match:Me(we),order:3,parse:function(e,n,r){return{children:De(n,e[1],r),target:Ne(e[2]),title:e[3]}},render:function(e,n,r){return Z(\"a\",{key:r.key,href:Be(e.target),title:e.title},n(e.children,r))}},i[16]={match:Me(j),order:0,parse:function(e){return{children:[{text:e[1],type:\"27\"}],target:e[1],type:\"15\"}}},i[17]={match:function(e,n){return n.inAnchor?null:Me(R)(e,n)},order:0,parse:function(e){return{children:[{text:e[1],type:\"27\"}],target:e[1],title:void 0,type:\"15\"}}},i[18]={match:Me(U),order:0,parse:function(e){var n=e[1],r=e[1];return u.test(r)||(r=\"mailto:\"+r),{children:[{text:n.replace(\"mailto:\",\"\"),type:\"27\"}],target:r,type:\"15\"}}},i[20]=Se(Z,1),i[33]=Se(Z,2),i[19]={match:Re(k),order:3,parse:Fe,render:function(){return\"\\n\"}},i[21]={match:je,order:3,parse:_e,render:function(e,n,r){return Z(\"p\",{key:r.key},n(e.children,r))}},i[22]={match:Me(H),order:0,parse:function(e){return Q[e[1]]={target:e[2],title:e[4]},{}},render:We},i[23]={match:Ie(D),order:0,parse:function(e){return{alt:e[1]||void 0,ref:e[2]}},render:function(e,n,r){return Z(\"img\",{key:r.key,alt:e.alt,src:Be(Q[e.ref].target),title:Q[e.ref].title})}},i[24]={match:Me(P),order:0,parse:function(e,n,r){return{children:n(e[1],r),fallbackChildren:n(e[0].replace(_,\"\\\\$1\"),r),ref:e[2]}},render:function(e,n,r){return Q[e.ref]?Z(\"a\",{key:r.key,href:Be(Q[e.ref].target),title:Q[e.ref].title},n(e.children,r)):Z(\"span\",{key:r.key},n(e.fallbackChildren,r))}},i[25]={match:Re(N),order:1,parse:Le,render:function(e,n,r){return Z(\"table\",{key:r.key},Z(\"thead\",null,Z(\"tr\",null,e.header.map(function(t,i){return Z(\"th\",{key:i,style:ze(e,i)},n(t,r))}))),Z(\"tbody\",null,e.cells.map(function(t,i){return Z(\"tr\",{key:i},t.map(function(t,i){return Z(\"td\",{key:i,style:ze(e,i)},n(t,r))}))})))}},i[26]={match:function(e,n){return n.inTable?(n.inline=!0,G.exec(e)):null},order:1,parse:function(){return{type:\"26\"}},render:function(){return\" | \"}},i[27]={match:Ue(re),order:4,parse:function(e){return{text:e[0].replace(T,function(e,n){return t.namedCodesToUnicode[n]?t.namedCodesToUnicode[n]:e})}},render:function(e){return e.text}},i[28]={match:Ie(J),order:2,parse:function(e,n,r){return{children:n(e[2],r)}},render:function(e,n,r){return Z(\"strong\",{key:r.key},n(e.children,r))}},i[29]={match:Ie(K),order:3,parse:function(e,n,r){return{children:n(e[2],r)}},render:function(e,n,r){return Z(\"em\",{key:r.key},n(e.children,r))}},i[30]={match:Ie(ne),order:1,parse:function(e){return{text:e[1],type:\"27\"}}},i[31]={match:Ie(Y),order:3,parse:_e,render:function(e,n,r){return Z(\"mark\",{key:r.key},n(e.children,r))}},i[32]={match:Ie(ee),order:3,parse:_e,render:function(e,n,r){return Z(\"del\",{key:r.key},n(e.children,r))}},i);!0===t.disableParsingRawHTML&&(delete ae[11],delete ae[13]);var ce,oe=function(e){var n=Object.keys(e);function r(t,i){for(var a=[],c=\"\";t;)for(var o=0;o<n.length;){var l=n[o],u=e[l],s=u.match(t,i,c);if(s){var f=s[0];t=t.substring(f.length);var d=u.parse(s,r,i);null==d.type&&(d.type=l),a.push(d),c=f;break}o++}return a}return n.sort(function(n,r){var t=e[n].order,i=e[r].order;return t!==i?t-i:n<r?-1:1}),function(e,n){return r(function(e){return e.replace(v,\"\\n\").replace(S,\"\").replace(W,\"    \")}(e),n)}}(ae),le=(ce=function(e,n){return function(r,t,i){var a=e[r.type].render;return n?n(function(){return a(r,t,i)},r,t,i):a(r,t,i)}}(ae,t.renderRule),function e(n,r){if(void 0===r&&(r={}),Array.isArray(n)){for(var t=r.key,i=[],a=!1,c=0;c<n.length;c++){r.key=c;var o=e(n[c],r),l=\"string\"==typeof o;l&&a?i[i.length-1]+=o:null!==o&&i.push(o),a=l}return r.key=t,i}return ce(n,e,r)}),ue=q(r);return X.length?Z(\"div\",null,ue,Z(\"footer\",{key:\"footer\"},X.map(function(e){return Z(\"div\",{id:t.slugify(e.identifier),key:e.identifier},e.identifier,le(oe(e.footnote,{inline:!0})))}))):ue}export default function(n){var r=n.children,t=n.options,a=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n.indexOf(r=a[t])>=0||(i[r]=e[r]);return i}(n,i);return e.cloneElement(Ve(r,t),a)}export{r as RuleType,Ve as compiler};\n//# sourceMappingURL=index.module.js.map\n","import Markdown, { compiler } from './'\nObject.assign(Markdown, { compiler })\nexport default Markdown as typeof Markdown & { compiler: typeof compiler }\n"],"names":["r","t","i","e","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","MAX","HIGH","MED","LOW","MIN","a","reduce","n","toLowerCase","for","c","amp","apos","gt","lt","nbsp","quot","o","l","u","s","f","d","p","h","m","g","y","k","v","x","b","S","w","C","E","$","A","O","T","L","z","M","I","R","U","j","B","N","H","D","P","_","F","W","G","Z","q","V","X","Q","J","K","Y","ee","ne","re","te","ie","ae","ce","oe","le","ue","se","fe","de","pe","RegExp","he","me","ge","ye","ke","ve","xe","be","Se","match","exec","list","inline","simple","order","parse","replace","items","map","length","indexOf","ordered","start","render","key","type","we","Ce","Ee","$e","concat","Ae","Oe","test","Te","inTable","trim","forEach","push","Le","split","align","cells","header","ze","textAlign","Me","Ie","Re","Ue","je","endsWith","every","some","trimEnd","Be","decodeURIComponent","Ne","He","De","Pe","_e","children","Fe","We","Ge","slice","call","arguments","filter","Boolean","join","Ze","shift","qe","Ve","overrides","slugify","namedCodesToUnicode","createElement","apply","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","cloneElement","lang","attrs","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","noInnerParse","tag","inAnchor","alt","title","src","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","Array","isArray","options","assign","Markdown","compiler"],"mappings":"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"}
=======
{"version":3,"file":"index.umd.js","sources":["../index.tsx","../index.cjs.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const enum RuleType {\n  blockQuote = '0',\n  breakLine = '1',\n  breakThematic = '2',\n  codeBlock = '3',\n  codeFenced = '4',\n  codeInline = '5',\n  footnote = '6',\n  footnoteReference = '7',\n  gfmTask = '8',\n  heading = '9',\n  headingSetext = '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock = '11',\n  htmlComment = '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing = '13',\n  image = '14',\n  link = '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector = '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector = '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector = '18',\n  newlineCoalescer = '19',\n  orderedList = '20',\n  paragraph = '21',\n  ref = '22',\n  refImage = '23',\n  refLink = '24',\n  table = '25',\n  tableSeparator = '26',\n  text = '27',\n  textBolded = '28',\n  textEmphasized = '29',\n  textEscaped = '30',\n  textMarked = '31',\n  textStrikethroughed = '32',\n  unorderedList = '33',\n}\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: RuleType.table,\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction sanitizeUrl(url: string): string | undefined {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return undefined\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  state.inline = false\n  return parse(children, state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap(capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1])}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const ast = {\n          attrs: attrStringToMap(capture[2]),\n          noInnerParse: noInnerParse,\n          tag: (noInnerParse ? tagName : capture[1]).trim(),\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1].trim(),\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.tableSeparator]: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        state.inline = true\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: RuleType.tableSeparator }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      render() {\n        return ' | '\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n","import Markdown, { compiler } from './'\nObject.assign(Markdown, { compiler })\nexport default Markdown as typeof Markdown & { compiler: typeof compiler }\n"],"names":["RuleType","Priority","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","match","source","state","prevCapture","isStartOfLine","exec","list","inline","simple","order","parse","capture","start","undefined","items","replace","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","adjustedContent","oldStateInline","oldStateList","result","render","node","output","key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","concat","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","prevInTable","inTable","tableRow","trim","cells","forEach","push","text","parseTable","header","align","split","rowText","parseTableCells","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","some","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","children","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","slice","call","arguments","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","compiler","markdown","options","_extends","createElementFn","createElement","React","props","overrideProps","apply","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","_","letter","toUpperCase","normalizeAttributeKey","value","first","unquote","mappedKey","normalizedValue","styles","kvPair","substr","attributeValueToJSXPropValue","cloneElement","footnotes","refs","rules","_rules","__","lang","attrs","footnote","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","_capture$3$match","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","ast","inAnchor","alt","title","address","ref","fallbackChildren","style","row","c","full","inner","disableParsingRawHTML","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","userRender","renderer","createRenderer","renderRule","patchedRender","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","Markdown","_ref","_ref$children","_objectWithoutPropertiesLoose","_excluded","assign"],"mappings":"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"}
>>>>>>> master
