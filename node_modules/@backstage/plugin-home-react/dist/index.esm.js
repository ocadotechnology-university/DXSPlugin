import React, { Suspense } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, IconButton } from '@material-ui/core';
import SettingsIcon from '@material-ui/icons/Settings';
import { InfoCard } from '@backstage/core-components';
import { createReactExtension, useApp } from '@backstage/core-plugin-api';

const SettingsModal = (props) => {
  const { open, close, componentName, children } = props;
  return /* @__PURE__ */ React.createElement(Dialog, { open, onClose: () => close() }, /* @__PURE__ */ React.createElement(DialogTitle, null, componentName ? `Settings - ${componentName}` : "Settings"), /* @__PURE__ */ React.createElement(DialogContent, null, children), /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, { onClick: () => close(), color: "primary", variant: "contained" }, "Close")));
};

function createCardExtension(options) {
  const { title, components, name, description, layout, settings } = options;
  const isCustomizable = (settings == null ? void 0 : settings.schema) !== void 0;
  return createReactExtension({
    name,
    data: { title, description, "home.widget.config": { layout, settings } },
    component: {
      lazy: () => components().then((componentParts) => {
        return (props) => {
          return /* @__PURE__ */ React.createElement(
            CardExtension,
            {
              ...props,
              ...componentParts,
              title: props.title || title,
              isCustomizable
            }
          );
        };
      })
    }
  });
}
function CardExtension(props) {
  const {
    Renderer,
    Content,
    Settings,
    Actions,
    ContextProvider,
    isCustomizable,
    title,
    ...childProps
  } = props;
  const app = useApp();
  const { Progress } = app.getComponents();
  const [settingsOpen, setSettingsOpen] = React.useState(false);
  if (Renderer) {
    return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, /* @__PURE__ */ React.createElement(
      Renderer,
      {
        ...title && { title },
        ...{
          Content,
          ...Actions ? { Actions } : {},
          ...Settings && !isCustomizable ? { Settings } : {},
          ...ContextProvider ? { ContextProvider } : {},
          ...childProps
        }
      }
    ));
  }
  const cardProps = {
    ...title && { title },
    ...Settings && !isCustomizable ? {
      action: /* @__PURE__ */ React.createElement(IconButton, { onClick: () => setSettingsOpen(true) }, /* @__PURE__ */ React.createElement(SettingsIcon, null, "Settings"))
    } : {},
    ...Actions ? {
      actions: /* @__PURE__ */ React.createElement(Actions, null)
    } : {}
  };
  const innerContent = /* @__PURE__ */ React.createElement(InfoCard, { ...cardProps }, Settings && !isCustomizable && /* @__PURE__ */ React.createElement(
    SettingsModal,
    {
      open: settingsOpen,
      componentName: title,
      close: () => setSettingsOpen(false)
    },
    /* @__PURE__ */ React.createElement(Settings, null)
  ), /* @__PURE__ */ React.createElement(Content, { ...childProps }));
  return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, ContextProvider ? /* @__PURE__ */ React.createElement(ContextProvider, { ...childProps }, innerContent) : innerContent);
}

export { SettingsModal, createCardExtension };
//# sourceMappingURL=index.esm.js.map
