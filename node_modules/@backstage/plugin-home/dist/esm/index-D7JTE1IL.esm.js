import React from 'react';
import useAsync from 'react-use/esm/useAsync';
import { Progress, ErrorPanel, Link, EmptyState, LinkButton } from '@backstage/core-components';
import { catalogApiRef, EntityDisplayName } from '@backstage/plugin-catalog-react';
import { useApi } from '@backstage/core-plugin-api';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import { stringifyEntityRef } from '@backstage/catalog-model';

const useStyles = makeStyles(
  (theme) => ({
    docDescription: {
      fontSize: theme.typography.body1.fontSize,
      fontWeight: theme.typography.body1.fontWeight,
      marginBottom: theme.spacing(2),
      marginTop: theme.spacing(2)
    },
    docSubLink: {
      fontSize: theme.typography.subtitle1.fontSize,
      fontWeight: theme.typography.subtitle1.fontWeight,
      lineHeight: theme.typography.subtitle1.lineHeight
    },
    docsTitleLink: {
      fontSize: theme.typography.h6.fontSize,
      fontWeight: theme.typography.h6.fontWeight,
      lineHeight: theme.typography.h6.lineHeight
    }
  }),
  { name: "HomeFeaturedDocsCard" }
);
const Content = (props) => {
  const { emptyState, filter, linkDestination, responseLimit, subLinkText } = props;
  const linkText = subLinkText || "LEARN MORE";
  const styles = useStyles();
  const catalogApi = useApi(catalogApiRef);
  const {
    value: entities,
    loading,
    error
  } = useAsync(async () => {
    const response = await catalogApi.getEntities({
      filter,
      limit: responseLimit || 10
    });
    return response.items;
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(ErrorPanel, { error });
  }
  return (entities == null ? void 0 : entities.length) ? /* @__PURE__ */ React.createElement(React.Fragment, null, entities.map((d) => /* @__PURE__ */ React.createElement(
    "div",
    {
      key: `${d.metadata.name}-${d.kind}-${d.metadata.namespace}`,
      "data-testid": "docs-card-content"
    },
    /* @__PURE__ */ React.createElement(
      Link,
      {
        className: styles.docsTitleLink,
        "data-testid": "docs-card-title",
        to: linkDestination || `/docs/${d.metadata.namespace || "default"}/${d.kind}/${d.metadata.name}/`
      },
      /* @__PURE__ */ React.createElement(EntityDisplayName, { entityRef: stringifyEntityRef(d) })
    ),
    d.metadata.description && /* @__PURE__ */ React.createElement(Typography, { className: styles.docDescription }, d.metadata.description),
    /* @__PURE__ */ React.createElement(
      Link,
      {
        className: styles.docSubLink,
        "data-testid": "docs-card-sub-link",
        to: linkDestination || `/docs/${d.metadata.namespace || "default"}/${d.kind}/${d.metadata.name}/`
      },
      linkText
    )
  ))) : emptyState || /* @__PURE__ */ React.createElement(
    EmptyState,
    {
      missing: "data",
      title: "No documents to show",
      description: "Create your own document. Check out our Getting Started Information",
      action: /* @__PURE__ */ React.createElement(
        LinkButton,
        {
          to: "https://backstage.io/docs/features/techdocs/getting-started",
          variant: "contained"
        },
        "DOCS"
      )
    }
  );
};

export { Content };
//# sourceMappingURL=index-D7JTE1IL.esm.js.map
