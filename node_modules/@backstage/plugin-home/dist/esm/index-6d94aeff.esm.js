import { entityRouteRef, entityRouteParams, catalogApiRef, useStarredEntities } from '@backstage/plugin-catalog-react';
import { stringifyEntityRef } from '@backstage/catalog-model';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { Progress, ResponseErrorPanel } from '@backstage/core-components';
import { ListItem, ListItemIcon, Tooltip, IconButton, ListItemText, Typography, List, Tabs, Tab } from '@material-ui/core';
import React from 'react';
import useAsync from 'react-use/lib/useAsync';
import { Link } from 'react-router-dom';
import StarIcon from '@material-ui/icons/Star';

const StarredEntityListItem = ({
  entity,
  onToggleStarredEntity
}) => {
  var _a;
  const catalogEntityRoute = useRouteRef(entityRouteRef);
  return /* @__PURE__ */ React.createElement(ListItem, { key: stringifyEntityRef(entity) }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Remove from starred" }, /* @__PURE__ */ React.createElement(
    IconButton,
    {
      edge: "end",
      "aria-label": "unstar",
      onClick: () => onToggleStarredEntity(entity)
    },
    /* @__PURE__ */ React.createElement(StarIcon, { style: { color: "#f3ba37" } })
  ))), /* @__PURE__ */ React.createElement(Link, { to: catalogEntityRoute(entityRouteParams(entity)) }, /* @__PURE__ */ React.createElement(ListItemText, { primary: (_a = entity.metadata.title) != null ? _a : entity.metadata.name })));
};

const Content = ({
  noStarredEntitiesMessage,
  groupByKind
}) => {
  var _a, _b;
  const catalogApi = useApi(catalogApiRef);
  const { starredEntities, toggleStarredEntity } = useStarredEntities();
  const [activeTab, setActiveTab] = React.useState(0);
  const entities = useAsync(async () => {
    if (!starredEntities.size) {
      return [];
    }
    return (await catalogApi.getEntitiesByRefs({
      entityRefs: [...starredEntities],
      fields: [
        "kind",
        "metadata.namespace",
        "metadata.name",
        "metadata.title"
      ]
    })).items.filter((e) => !!e);
  }, [catalogApi, starredEntities]);
  if (starredEntities.size === 0)
    return /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, noStarredEntitiesMessage || "Click the star beside an entity name to add it to this list!");
  if (entities.loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  const groupedEntities = {};
  (_a = entities.value) == null ? void 0 : _a.forEach((entity) => {
    const kind = entity.kind;
    if (!groupedEntities[kind]) {
      groupedEntities[kind] = [];
    }
    groupedEntities[kind].push(entity);
  });
  const groupByKindEntries = Object.entries(groupedEntities);
  return entities.error ? /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error: entities.error }) : /* @__PURE__ */ React.createElement("div", null, !groupByKind && /* @__PURE__ */ React.createElement(List, null, (_b = entities.value) == null ? void 0 : _b.sort(
    (a, b) => {
      var _a2, _b2;
      return ((_a2 = a.metadata.title) != null ? _a2 : a.metadata.name).localeCompare(
        (_b2 = b.metadata.title) != null ? _b2 : b.metadata.name
      );
    }
  ).map((entity) => /* @__PURE__ */ React.createElement(
    StarredEntityListItem,
    {
      key: stringifyEntityRef(entity),
      entity,
      onToggleStarredEntity: toggleStarredEntity
    }
  ))), groupByKind && /* @__PURE__ */ React.createElement(
    Tabs,
    {
      value: activeTab,
      onChange: (_, newValue) => setActiveTab(newValue),
      variant: "scrollable",
      scrollButtons: "auto",
      "aria-label": "entity-tabs"
    },
    groupByKindEntries.map(([kind]) => /* @__PURE__ */ React.createElement(Tab, { key: kind, label: kind }))
  ), groupByKind && groupByKindEntries.map(([kind, entitiesByKind], index) => /* @__PURE__ */ React.createElement("div", { key: kind, hidden: groupByKind && activeTab !== index }, /* @__PURE__ */ React.createElement(List, null, entitiesByKind == null ? void 0 : entitiesByKind.sort(
    (a, b) => {
      var _a2, _b2;
      return ((_a2 = a.metadata.title) != null ? _a2 : a.metadata.name).localeCompare(
        (_b2 = b.metadata.title) != null ? _b2 : b.metadata.name
      );
    }
  ).map((entity) => /* @__PURE__ */ React.createElement(
    StarredEntityListItem,
    {
      key: stringifyEntityRef(entity),
      entity,
      onToggleStarredEntity: toggleStarredEntity
    }
  ))))));
};

export { Content };
//# sourceMappingURL=index-6d94aeff.esm.js.map
