import React, { createContext, useMemo, useCallback, useEffect } from 'react';
import Button from '@material-ui/core/Button';
import { i as isOperator, v as visitsApiRef } from './VisitListener-dDLtFiIW.esm.js';
import Collapse from '@material-ui/core/Collapse';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { Link } from '@backstage/core-components';
import { DateTime } from 'luxon';
import Chip from '@material-ui/core/Chip';
import { colorVariants } from '@backstage/theme';
import { parseEntityRef } from '@backstage/catalog-model';
import Skeleton from '@material-ui/lab/Skeleton';
import '@backstage/core-app-api';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';

const defaultContextValueOnly = {
  collapsed: true,
  numVisitsOpen: 3,
  numVisitsTotal: 8,
  visits: [],
  loading: true,
  kind: "recent"
};
const defaultContextValue = {
  ...defaultContextValueOnly,
  setCollapsed: () => {
  },
  setNumVisitsOpen: () => {
  },
  setNumVisitsTotal: () => {
  },
  setVisits: () => {
  },
  setLoading: () => {
  },
  setKind: () => {
  },
  setContext: () => {
  }
};
const Context = createContext(defaultContextValue);
const getFilteredSet = (setContext, contextKey) => (e) => setContext((state) => ({
  ...state,
  [contextKey]: typeof e === "function" ? e(state[contextKey]) : e
}));
const ContextProvider = ({ children }) => {
  const [context, setContext] = React.useState(
    defaultContextValueOnly
  );
  const {
    setCollapsed,
    setNumVisitsOpen,
    setNumVisitsTotal,
    setVisits,
    setLoading,
    setKind
  } = useMemo(
    () => ({
      setCollapsed: getFilteredSet(setContext, "collapsed"),
      setNumVisitsOpen: getFilteredSet(setContext, "numVisitsOpen"),
      setNumVisitsTotal: getFilteredSet(setContext, "numVisitsTotal"),
      setVisits: getFilteredSet(setContext, "visits"),
      setLoading: getFilteredSet(setContext, "loading"),
      setKind: getFilteredSet(setContext, "kind")
    }),
    [setContext]
  );
  const value = {
    ...context,
    setContext,
    setCollapsed,
    setNumVisitsOpen,
    setNumVisitsTotal,
    setVisits,
    setLoading,
    setKind
  };
  return /* @__PURE__ */ React.createElement(Context.Provider, { value }, children);
};
const useContext = () => {
  const value = React.useContext(Context);
  if (value === void 0)
    throw new Error(
      "VisitedByType useContext found undefined ContextValue, <ContextProvider/> could be missing"
    );
  return value;
};

const Actions = () => {
  const { collapsed, setCollapsed, visits, numVisitsOpen, loading } = useContext();
  const onClick = useCallback(
    () => setCollapsed((prevCollapsed) => !prevCollapsed),
    [setCollapsed]
  );
  const label = collapsed ? "View More" : "View Less";
  if (!loading && visits.length <= numVisitsOpen)
    return /* @__PURE__ */ React.createElement(React.Fragment, null);
  return /* @__PURE__ */ React.createElement(Button, { variant: "text", onClick }, label);
};

function readFilterConfig(config) {
  try {
    const field = config.getString("field");
    const operator = config.getString("operator");
    const value = getValue(config);
    if (isOperator(operator) && value !== void 0) {
      return { field, operator, value };
    }
    return void 0;
  } catch (error) {
    return void 0;
  }
}
function getValue(config) {
  let value = void 0;
  try {
    value = config.getString("value");
  } catch (error) {
    try {
      value = config.getNumber("value");
    } catch {
    }
  }
  return value;
}
function createFilterByQueryParamFromConfig(configs) {
  try {
    return configs.map(readFilterConfig).filter(Boolean);
  } catch {
    return void 0;
  }
}

const useStyles$3 = makeStyles((_theme) => ({
  name: {
    marginLeft: "0.8rem",
    marginRight: "0.8rem"
  }
}));
const ItemName = ({ visit }) => {
  const classes = useStyles$3();
  return /* @__PURE__ */ React.createElement(
    Typography,
    {
      component: Link,
      to: visit.pathname,
      noWrap: true,
      className: classes.name
    },
    visit.name
  );
};

const ItemDetailHits = ({ visit }) => /* @__PURE__ */ React.createElement(Typography, { component: "span", variant: "caption", color: "textSecondary" }, visit.hits, " time", visit.hits > 1 ? "s" : "");
const ItemDetailTimeAgo = ({ visit }) => {
  var _a;
  const visitDate = DateTime.fromMillis(visit.timestamp);
  return /* @__PURE__ */ React.createElement(
    Typography,
    {
      component: "time",
      variant: "caption",
      color: "textSecondary",
      dateTime: (_a = visitDate.toISO()) != null ? _a : void 0
    },
    visitDate >= DateTime.now().startOf("day") ? visitDate.toFormat("HH:mm") : visitDate.toRelative()
  );
};
const ItemDetail = ({
  visit,
  type
}) => type === "time-ago" ? /* @__PURE__ */ React.createElement(ItemDetailTimeAgo, { visit }) : /* @__PURE__ */ React.createElement(ItemDetailHits, { visit });

const useStyles$2 = makeStyles((theme) => ({
  chip: {
    color: theme.palette.common.white,
    fontWeight: "bold",
    margin: 0
  }
}));
const maybeEntity = (visit) => {
  var _a;
  try {
    return parseEntityRef((_a = visit == null ? void 0 : visit.entityRef) != null ? _a : "");
  } catch (e) {
    return void 0;
  }
};
const getColorByIndex = (index) => {
  const variants = Object.keys(colorVariants);
  const variantIndex = index % variants.length;
  return colorVariants[variants[variantIndex]][0];
};
const getChipColor = (entity) => {
  const defaultColor = getColorByIndex(0);
  if (!entity)
    return defaultColor;
  const entityKinds = [
    "component",
    "template",
    "api",
    "group",
    "user",
    "resource",
    "system",
    "domain",
    "location"
  ];
  const foundIndex = entityKinds.indexOf(
    entity.kind.toLocaleLowerCase("en-US")
  );
  return foundIndex === -1 ? defaultColor : getColorByIndex(foundIndex + 1);
};
const ItemCategory = ({ visit }) => {
  var _a;
  const classes = useStyles$2();
  const entity = maybeEntity(visit);
  return /* @__PURE__ */ React.createElement(
    Chip,
    {
      size: "small",
      className: classes.chip,
      label: ((_a = entity == null ? void 0 : entity.kind) != null ? _a : "Other").toLocaleLowerCase("en-US"),
      style: { background: getChipColor(entity) }
    }
  );
};

const useStyles$1 = makeStyles((_theme) => ({
  avatar: {
    minWidth: 0
  }
}));
const VisitListItem = ({
  visit,
  detailType
}) => {
  const classes = useStyles$1();
  return /* @__PURE__ */ React.createElement(ListItem, { disableGutters: true }, /* @__PURE__ */ React.createElement(ListItemAvatar, { className: classes.avatar }, /* @__PURE__ */ React.createElement(ItemCategory, { visit })), /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: /* @__PURE__ */ React.createElement(ItemName, { visit }),
      secondary: /* @__PURE__ */ React.createElement(ItemDetail, { visit, type: detailType }),
      disableTypography: true
    }
  ));
};

const VisitListEmpty = () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, "There are no visits to show yet."), /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, "Once you start using Backstage, your visits will appear here as a quick link to carry on where you left off."));

const VisitListFew = () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, "The more pages you visit, the more pages will appear here."));

const useStyles = makeStyles((_theme) => ({
  skeleton: {
    borderRadius: 30
  }
}));
const VisitListItemSkeleton = () => {
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(ListItem, { disableGutters: true }, /* @__PURE__ */ React.createElement(ListItemAvatar, null, /* @__PURE__ */ React.createElement(
    Skeleton,
    {
      className: classes.skeleton,
      variant: "rect",
      width: 50,
      height: 24
    }
  )), /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: /* @__PURE__ */ React.createElement(Skeleton, { variant: "text", width: "100%", height: 28 }),
      disableTypography: true
    }
  ));
};
const VisitListSkeleton = ({
  numVisitsOpen,
  numVisitsTotal,
  collapsed
}) => /* @__PURE__ */ React.createElement(React.Fragment, null, Array(numVisitsOpen).fill(null).map((_e, index) => /* @__PURE__ */ React.createElement(VisitListItemSkeleton, { key: index })), numVisitsTotal > numVisitsOpen && /* @__PURE__ */ React.createElement(Collapse, { in: !collapsed }, Array(numVisitsTotal - numVisitsOpen).fill(null).map((_e, index) => /* @__PURE__ */ React.createElement(VisitListItemSkeleton, { key: index }))));

const VisitList = ({
  detailType,
  visits = [],
  numVisitsOpen = 3,
  numVisitsTotal = 8,
  collapsed = true,
  loading = false,
  title = ""
}) => {
  let listBody = /* @__PURE__ */ React.createElement(React.Fragment, null);
  if (loading) {
    listBody = /* @__PURE__ */ React.createElement(
      VisitListSkeleton,
      {
        numVisitsOpen,
        numVisitsTotal,
        collapsed
      }
    );
  } else if (visits.length === 0) {
    listBody = /* @__PURE__ */ React.createElement(VisitListEmpty, null);
  } else if (visits.length < numVisitsOpen) {
    listBody = /* @__PURE__ */ React.createElement(React.Fragment, null, visits.map((visit, index) => /* @__PURE__ */ React.createElement(VisitListItem, { visit, key: index, detailType })), /* @__PURE__ */ React.createElement(VisitListFew, null));
  } else {
    listBody = /* @__PURE__ */ React.createElement(React.Fragment, null, visits.slice(0, numVisitsOpen).map((visit, index) => /* @__PURE__ */ React.createElement(VisitListItem, { visit, key: index, detailType })), visits.length > numVisitsOpen && /* @__PURE__ */ React.createElement(Collapse, { in: !collapsed }, visits.slice(numVisitsOpen, numVisitsTotal).map((visit, index) => /* @__PURE__ */ React.createElement(
      VisitListItem,
      {
        visit,
        key: index,
        detailType
      }
    ))));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, title && /* @__PURE__ */ React.createElement("h5", null, title), /* @__PURE__ */ React.createElement(List, { dense: true, disablePadding: true }, listBody));
};

const VisitedByType = () => {
  const { collapsed, numVisitsOpen, numVisitsTotal, visits, loading, kind } = useContext();
  return /* @__PURE__ */ React.createElement(
    VisitList,
    {
      visits,
      detailType: kind === "top" ? "hits" : "time-ago",
      collapsed,
      numVisitsOpen,
      numVisitsTotal,
      loading
    }
  );
};

const Content = ({
  visits,
  numVisitsOpen,
  numVisitsTotal,
  loading,
  kind
}) => {
  const { setContext, setVisits, setLoading } = useContext();
  useEffect(() => {
    const context = {};
    context.kind = kind;
    if (visits) {
      context.visits = visits;
      context.loading = false;
    } else if (loading) {
      context.loading = loading;
    }
    if (numVisitsOpen)
      context.numVisitsOpen = numVisitsOpen;
    if (numVisitsTotal)
      context.numVisitsTotal = numVisitsTotal;
    setContext((state) => ({ ...state, ...context }));
  }, [setContext, kind, visits, loading, numVisitsOpen, numVisitsTotal]);
  const config = useApi(configApiRef);
  const visitsApi = useApi(visitsApiRef);
  const { loading: reqLoading } = useAsync(async () => {
    var _a, _b;
    if (!visits && !loading && kind === "recent") {
      const filterBy = createFilterByQueryParamFromConfig(
        (_a = config.getOptionalConfigArray("home.recentVisits.filterBy")) != null ? _a : []
      );
      return await visitsApi.list({
        limit: numVisitsTotal != null ? numVisitsTotal : 8,
        orderBy: [{ field: "timestamp", direction: "desc" }],
        ...filterBy && { filterBy }
      }).then(setVisits);
    }
    if (!visits && !loading && kind === "top") {
      const filterBy = createFilterByQueryParamFromConfig(
        (_b = config.getOptionalConfigArray("home.topVisits.filterBy")) != null ? _b : []
      );
      return await visitsApi.list({
        limit: numVisitsTotal != null ? numVisitsTotal : 8,
        orderBy: [{ field: "hits", direction: "desc" }],
        ...filterBy && { filterBy }
      }).then(setVisits);
    }
    return void 0;
  }, [visitsApi, visits, loading, setVisits]);
  useEffect(() => {
    if (!loading) {
      setLoading(reqLoading);
    }
  }, [loading, setLoading, reqLoading]);
  return /* @__PURE__ */ React.createElement(VisitedByType, null);
};

export { Actions as A, Content as C, ContextProvider as a };
//# sourceMappingURL=Content-Quo42yad.esm.js.map
