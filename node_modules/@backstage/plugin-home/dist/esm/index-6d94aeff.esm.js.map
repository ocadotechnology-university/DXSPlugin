{"version":3,"file":"index-6d94aeff.esm.js","sources":["../../src/components/StarredEntityListItem/StarredEntityListItem.tsx","../../src/homePageComponents/StarredEntities/Content.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { entityRouteParams } from '@backstage/plugin-catalog-react';\nimport {\n  ListItem,\n  ListItemIcon,\n  Tooltip,\n  IconButton,\n  ListItemText,\n} from '@material-ui/core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { entityRouteRef } from '@backstage/plugin-catalog-react';\nimport { useRouteRef } from '@backstage/core-plugin-api';\nimport StarIcon from '@material-ui/icons/Star';\n\ntype EntityListItemProps = {\n  entity: Entity;\n  onToggleStarredEntity: (entity: Entity) => void;\n};\n\nexport const StarredEntityListItem = ({\n  entity,\n  onToggleStarredEntity,\n}: EntityListItemProps) => {\n  const catalogEntityRoute = useRouteRef(entityRouteRef);\n\n  return (\n    <ListItem key={stringifyEntityRef(entity)}>\n      <ListItemIcon>\n        <Tooltip title=\"Remove from starred\">\n          <IconButton\n            edge=\"end\"\n            aria-label=\"unstar\"\n            onClick={() => onToggleStarredEntity(entity)}\n          >\n            <StarIcon style={{ color: '#f3ba37' }} />\n          </IconButton>\n        </Tooltip>\n      </ListItemIcon>\n      <Link to={catalogEntityRoute(entityRouteParams(entity))}>\n        <ListItemText primary={entity.metadata.title ?? entity.metadata.name} />\n      </Link>\n    </ListItem>\n  );\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  catalogApiRef,\n  useStarredEntities,\n} from '@backstage/plugin-catalog-react';\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { Progress, ResponseErrorPanel } from '@backstage/core-components';\nimport { List, Typography, Tabs, Tab } from '@material-ui/core';\nimport React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { StarredEntityListItem } from '../../components/StarredEntityListItem/StarredEntityListItem';\n\n/**\n * A component to display a list of starred entities for the user.\n *\n * @public\n */\n\nexport type StarredEntitiesProps = {\n  noStarredEntitiesMessage?: React.ReactNode | undefined;\n  groupByKind?: boolean;\n};\n\nexport const Content = ({\n  noStarredEntitiesMessage,\n  groupByKind,\n}: StarredEntitiesProps) => {\n  const catalogApi = useApi(catalogApiRef);\n  const { starredEntities, toggleStarredEntity } = useStarredEntities();\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  // Grab starred entities from catalog to ensure they still exist and also retrieve display titles\n  const entities = useAsync(async () => {\n    if (!starredEntities.size) {\n      return [];\n    }\n\n    return (\n      await catalogApi.getEntitiesByRefs({\n        entityRefs: [...starredEntities],\n        fields: [\n          'kind',\n          'metadata.namespace',\n          'metadata.name',\n          'metadata.title',\n        ],\n      })\n    ).items.filter((e): e is Entity => !!e);\n  }, [catalogApi, starredEntities]);\n\n  if (starredEntities.size === 0)\n    return (\n      <Typography variant=\"body1\">\n        {noStarredEntitiesMessage ||\n          'Click the star beside an entity name to add it to this list!'}\n      </Typography>\n    );\n\n  if (entities.loading) {\n    return <Progress />;\n  }\n\n  const groupedEntities: { [kind: string]: Entity[] } = {};\n  entities.value?.forEach(entity => {\n    const kind = entity.kind;\n    if (!groupedEntities[kind]) {\n      groupedEntities[kind] = [];\n    }\n    groupedEntities[kind].push(entity);\n  });\n\n  const groupByKindEntries = Object.entries(groupedEntities);\n\n  return entities.error ? (\n    <ResponseErrorPanel error={entities.error} />\n  ) : (\n    <div>\n      {!groupByKind && (\n        <List>\n          {entities.value\n            ?.sort((a, b) =>\n              (a.metadata.title ?? a.metadata.name).localeCompare(\n                b.metadata.title ?? b.metadata.name,\n              ),\n            )\n            .map(entity => (\n              <StarredEntityListItem\n                key={stringifyEntityRef(entity)}\n                entity={entity}\n                onToggleStarredEntity={toggleStarredEntity}\n              />\n            ))}\n        </List>\n      )}\n\n      {groupByKind && (\n        <Tabs\n          value={activeTab}\n          onChange={(_, newValue) => setActiveTab(newValue)}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"entity-tabs\"\n        >\n          {groupByKindEntries.map(([kind]) => (\n            <Tab key={kind} label={kind} />\n          ))}\n        </Tabs>\n      )}\n\n      {groupByKind &&\n        groupByKindEntries.map(([kind, entitiesByKind], index) => (\n          <div key={kind} hidden={groupByKind && activeTab !== index}>\n            <List>\n              {entitiesByKind\n                ?.sort((a, b) =>\n                  (a.metadata.title ?? a.metadata.name).localeCompare(\n                    b.metadata.title ?? b.metadata.name,\n                  ),\n                )\n                .map(entity => (\n                  <StarredEntityListItem\n                    key={stringifyEntityRef(entity)}\n                    entity={entity}\n                    onToggleStarredEntity={toggleStarredEntity}\n                  />\n                ))}\n            </List>\n          </div>\n        ))}\n    </div>\n  );\n};\n"],"names":["_a","_b"],"mappings":"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"}