import React from 'react';
import { HeaderLabel } from '@backstage/core-components';

const timeFormat = {
  hour: "2-digit",
  minute: "2-digit"
};
function getTimes(clockConfigs, customTimeFormat) {
  const d = /* @__PURE__ */ new Date();
  const lang = window.navigator.language;
  const clocks = [];
  if (!clockConfigs) {
    return clocks;
  }
  for (const clockConfig of clockConfigs) {
    let label = clockConfig.label;
    const options = {
      timeZone: clockConfig.timeZone,
      ...customTimeFormat != null ? customTimeFormat : timeFormat
    };
    try {
      (/* @__PURE__ */ new Date()).toLocaleString(lang, options);
    } catch (e) {
      console.warn(
        `The timezone ${options.timeZone} is invalid. Defaulting to GMT`
      );
      options.timeZone = "GMT";
      label = "GMT";
    }
    const value = d.toLocaleTimeString(lang, options);
    const dateTime = d.toLocaleTimeString(lang, {
      timeZone: options.timeZone,
      hour: "2-digit",
      minute: "2-digit",
      hour12: false
    });
    clocks.push({ label, value, dateTime });
  }
  return clocks;
}
const HeaderWorldClock = (props) => {
  const { clockConfigs, customTimeFormat } = props;
  const defaultTimes = [];
  const [clocks, setTimes] = React.useState(defaultTimes);
  React.useEffect(() => {
    setTimes(getTimes(clockConfigs, customTimeFormat));
    const intervalId = setInterval(() => {
      setTimes(getTimes(clockConfigs, customTimeFormat));
    }, 1e3);
    return () => {
      clearInterval(intervalId);
    };
  }, [clockConfigs, customTimeFormat]);
  if (clocks.length !== 0) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, clocks.map((clock) => /* @__PURE__ */ React.createElement(
      HeaderLabel,
      {
        key: clock.label,
        label: clock.label,
        value: /* @__PURE__ */ React.createElement("time", { dateTime: clock.dateTime }, clock.value)
      }
    )));
  }
  return null;
};

export { HeaderWorldClock };
//# sourceMappingURL=index-BvvJGS3L.esm.js.map
