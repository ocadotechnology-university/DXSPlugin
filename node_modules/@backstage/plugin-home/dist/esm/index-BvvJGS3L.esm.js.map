{"version":3,"file":"index-BvvJGS3L.esm.js","sources":["../../src/homePageComponents/HeaderWorldClock/HeaderWorldClock.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { HeaderLabel } from '@backstage/core-components';\n\nconst timeFormat: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\ntype TimeObj = {\n  label: string;\n  value: string;\n  dateTime: string;\n};\n\n/** @public */\nexport type ClockConfig = {\n  label: string;\n  timeZone: string;\n};\n\nfunction getTimes(\n  clockConfigs: ClockConfig[],\n  customTimeFormat?: Intl.DateTimeFormatOptions,\n) {\n  const d = new Date();\n  const lang = window.navigator.language;\n\n  const clocks: TimeObj[] = [];\n\n  if (!clockConfigs) {\n    return clocks;\n  }\n\n  for (const clockConfig of clockConfigs) {\n    let label = clockConfig.label;\n\n    const options: Intl.DateTimeFormatOptions = {\n      timeZone: clockConfig.timeZone,\n      ...(customTimeFormat ?? timeFormat),\n    };\n\n    try {\n      new Date().toLocaleString(lang, options);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The timezone ${options.timeZone} is invalid. Defaulting to GMT`,\n      );\n      options.timeZone = 'GMT';\n      label = 'GMT';\n    }\n\n    const value = d.toLocaleTimeString(lang, options);\n    const dateTime = d.toLocaleTimeString(lang, {\n      timeZone: options.timeZone,\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    });\n    clocks.push({ label, value, dateTime });\n  }\n\n  return clocks;\n}\n\n/**\n * A component to display a configurable list of clocks for various time zones.\n *\n * @example\n * Here's a simple example:\n * ```\n * // This will give you a clock for the time zone that Stockholm is in\n * // you can add more than one but keep in mind space may be limited\n * const clockConfigs: ClockConfig[] = [\n *  {\n *    label: 'STO',\n *    timeZone: 'Europe/Stockholm',\n *  },\n * ];\n *\n * // Setting hour12 to false will make all the clocks show in the 24hr format\n * const timeFormat: Intl.DateTimeFormatOptions = {\n *  hour: '2-digit',\n *  minute: '2-digit',\n *  hour12: false,\n * };\n *\n * // Here is the component in use:\n * <HeaderWorldClock\n *  clockConfigs={clockConfigs}\n *  customTimeFormat={timeFormat}\n * />\n * ```\n *\n * @public\n */\nexport const HeaderWorldClock = (props: {\n  clockConfigs: ClockConfig[];\n  customTimeFormat?: Intl.DateTimeFormatOptions;\n}) => {\n  const { clockConfigs, customTimeFormat } = props;\n\n  const defaultTimes: TimeObj[] = [];\n  const [clocks, setTimes] = React.useState(defaultTimes);\n\n  React.useEffect(() => {\n    setTimes(getTimes(clockConfigs, customTimeFormat));\n\n    const intervalId = setInterval(() => {\n      setTimes(getTimes(clockConfigs, customTimeFormat));\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [clockConfigs, customTimeFormat]);\n\n  if (clocks.length !== 0) {\n    return (\n      <>\n        {clocks.map(clock => (\n          <HeaderLabel\n            key={clock.label}\n            label={clock.label}\n            value={<time dateTime={clock.dateTime}>{clock.value}</time>}\n          />\n        ))}\n      </>\n    );\n  }\n  return null;\n};\n"],"names":[],"mappings":"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"}