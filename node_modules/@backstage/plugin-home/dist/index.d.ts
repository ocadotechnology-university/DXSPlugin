/// <reference types="react" />
import * as _backstage_plugin_home_react from '@backstage/plugin-home-react';
import { createCardExtension as createCardExtension$1, CardExtensionProps as CardExtensionProps$1, CardLayout as CardLayout$1, CardSettings as CardSettings$1, CardConfig as CardConfig$1, ComponentParts as ComponentParts$1, ComponentRenderer as ComponentRenderer$1, RendererProps as RendererProps$1 } from '@backstage/plugin-home-react';
import * as React from 'react';
import React__default, { ReactNode, ReactElement } from 'react';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { StorageApi, IdentityApi, ErrorApi } from '@backstage/core-plugin-api';
import { EntityFilterQuery } from '@backstage/catalog-client';

/** @public */
type Tool = {
    label: string;
    url: string;
    icon: React__default.ReactNode;
};

/**
 * Props for Toolkit Content component.
 *
 * @public
 */
type ToolkitContentProps = {
    tools: Tool[];
};

/** @public */
type ClockConfig = {
    label: string;
    timeZone: string;
};

/** @public */
type WelcomeTitleLanguageProps = {
    language?: string[];
};

/**
 * @public
 * The operators that can be used in filter.
 */
type Operators = '<' | '<=' | '==' | '!=' | '>' | '>=' | 'contains';
/**
 * @public
 * Type guard for operators.
 */
declare const isOperator: (s: string) => s is Operators;
/**
 * @public
 * Model for a visit entity.
 */
type Visit = {
    /**
     * The auto-generated visit identification.
     */
    id: string;
    /**
     * The visited entity, usually an entity id.
     */
    name: string;
    /**
     * The visited url pathname, usually the entity route.
     */
    pathname: string;
    /**
     * An individual view count.
     */
    hits: number;
    /**
     * Last date and time of visit. Format: unix epoch in ms.
     */
    timestamp: number;
    /**
     * Optional entity reference. See stringifyEntityRef from catalog-model.
     */
    entityRef?: string;
};
/**
 * @public
 * This data structure represents the parameters associated with search queries for visits.
 */
type VisitsApiQueryParams = {
    /**
     * Limits the number of results returned. The default is 8.
     */
    limit?: number;
    /**
     * Allows ordering visits on entity properties.
     * @example
     * Sort ascending by the timestamp field.
     * ```
     * { orderBy: [{ field: 'timestamp', direction: 'asc' }] }
     * ```
     */
    orderBy?: Array<{
        field: keyof Visit;
        direction: 'asc' | 'desc';
    }>;
    /**
     * Allows filtering visits on entity properties.
     * @example
     * Most popular docs on the past 7 days
     * ```
     * {
     *   orderBy: [{ field: 'hits', direction: 'desc' }],
     *   filterBy: [
     *     { field: 'timestamp', operator: '>=', value: <date> },
     *     { field: 'entityRef', operator: 'contains', value: 'docs' }
     *   ]
     * }
     * ```
     */
    filterBy?: Array<{
        field: keyof Visit;
        operator: Operators;
        value: string | number;
    }>;
};
/**
 * @public
 * This data structure represents the parameters associated with saving visits.
 */
type VisitsApiSaveParams = {
    visit: Omit<Visit, 'id' | 'hits' | 'timestamp'>;
};
/**
 * @public
 * Visits API public contract.
 */
interface VisitsApi {
    /**
     * Persist a new visit.
     * @param pageVisit - a new visit data
     */
    save(saveParams: VisitsApiSaveParams): Promise<Visit>;
    /**
     * Get user visits.
     * @param queryParams - optional search query params.
     */
    list(queryParams?: VisitsApiQueryParams): Promise<Visit[]>;
}
/** @public */
declare const visitsApiRef: _backstage_core_plugin_api.ApiRef<VisitsApi>;

/** @public */
type VisitsStorageApiOptions = {
    limit?: number;
    storageApi: StorageApi;
    identityApi: IdentityApi;
};
/**
 * @public
 * This is an implementation of VisitsApi that relies on a StorageApi.
 * Beware that filtering and ordering are done in memory therefore it is
 * prudent to keep limit to a reasonable size.
 */
declare class VisitsStorageApi implements VisitsApi {
    private readonly limit;
    private readonly storageApi;
    private readonly storageKeyPrefix;
    private readonly identityApi;
    static create(options: VisitsStorageApiOptions): VisitsStorageApi;
    private constructor();
    /**
     * Returns a list of visits through the visitsApi
     */
    list(queryParams?: VisitsApiQueryParams): Promise<Visit[]>;
    /**
     * Saves a visit through the visitsApi
     */
    save(saveParams: VisitsApiSaveParams): Promise<Visit>;
    private persistAll;
    private retrieveAll;
    private getStorageKey;
    private compare;
}

/** @public */
type VisitsWebStorageApiOptions = {
    limit?: number;
    identityApi: IdentityApi;
    errorApi: ErrorApi;
};
/**
 * @public
 * This is a reference implementation of VisitsApi using WebStorage.
 */
declare class VisitsWebStorageApi {
    static create(options: VisitsWebStorageApiOptions): VisitsStorageApi;
}

/** @public */
type VisitedByTypeKind = 'recent' | 'top';
/** @public */
type VisitedByTypeProps = {
    visits?: Array<Visit>;
    numVisitsOpen?: number;
    numVisitsTotal?: number;
    loading?: boolean;
    kind: VisitedByTypeKind;
};

/**
 * Props customizing the <FeaturedDocsCard/> component.
 *
 * @public
 */
type FeaturedDocsCardProps = {
    /** The entity filter used to display only the intended item/s */
    filter: EntityFilterQuery;
    /** An optional ReactNode for empty states */
    emptyState?: React__default.JSX.Element;
    /** An optional linkDestination to set for the Featured Doc  */
    linkDestination?: string;
    /** An optional limit to set for link destination  */
    responseLimit?: number;
    /** An optional string to customize sublink text */
    subLinkText?: string;
};

/**
 * A component to display a list of starred entities for the user.
 *
 * @public
 */
type StarredEntitiesProps = {
    noStarredEntitiesMessage?: React__default.ReactNode | undefined;
    groupByKind?: boolean;
};

/** @public */
declare const homePlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
/** @public */
declare const HomepageCompositionRoot: (props: {
    title?: string | undefined;
    children?: React.ReactNode;
}) => React.JSX.Element;
/** @public */
declare const ComponentAccordion: (props: {
    title?: string | undefined;
    expanded?: boolean | undefined;
    Content: () => JSX.Element;
    Actions?: (() => JSX.Element) | undefined;
<<<<<<< HEAD
=======
    /** @public */
>>>>>>> master
    Settings?: (() => JSX.Element) | undefined;
    ContextProvider?: ((props: any) => JSX.Element) | undefined;
}) => React.JSX.Element;
/** @public */
declare const ComponentTabs: (props: {
    title: string;
    tabs: {
        label: string;
        Component: () => JSX.Element;
    }[];
}) => React.JSX.Element;
/** @public */
declare const ComponentTab: (props: {
    title: string;
    Content: () => JSX.Element;
    ContextProvider?: ((props: any) => JSX.Element) | undefined;
}) => React.JSX.Element;
/**
 * A component to display a playful greeting for the user.
 *
 * @public
 */
declare const WelcomeTitle: ({ language }: WelcomeTitleLanguageProps) => React.JSX.Element;
/**
 * A component to display a company logo for the user.
 *
 * @public
 */
declare const HomePageCompanyLogo: (props: {
    logo?: React.ReactNode;
    className?: string | undefined;
}) => React.JSX.Element;
/** @public */
declare const HomePageRandomJoke: (props: _backstage_plugin_home_react.CardExtensionProps<{
    defaultCategory?: "any" | "programming" | undefined;
}>) => React.JSX.Element;
/**
 * A component to display a list of tools for the user.
 *
 * @public
 */
declare const HomePageToolkit: (props: _backstage_plugin_home_react.CardExtensionProps<ToolkitContentProps>) => React.JSX.Element;
/**
 * A component to display a list of starred entities for the user.
 *
 * @public
 */
declare const HomePageStarredEntities: (props: _backstage_plugin_home_react.CardExtensionProps<Partial<StarredEntitiesProps>>) => React.JSX.Element;
/**
 * A component to display a configurable list of clocks for various time zones.
 *
 * @public
 */
declare const HeaderWorldClock: (props: {
    clockConfigs: ClockConfig[];
    customTimeFormat?: Intl.DateTimeFormatOptions | undefined;
}) => React.JSX.Element | null;
/**
 * Display top visited pages for the homepage
 * @public
 */
declare const HomePageTopVisited: (props: _backstage_plugin_home_react.CardExtensionProps<Partial<VisitedByTypeProps>>) => React.JSX.Element;
/**
 * Display recently visited pages for the homepage
 * @public
 */
declare const HomePageRecentlyVisited: (props: _backstage_plugin_home_react.CardExtensionProps<Partial<VisitedByTypeProps>>) => React.JSX.Element;
/**
 * A component to display specific Featured Docs.
 *
 * @public
 */
declare const FeaturedDocsCard: (props: _backstage_plugin_home_react.CardExtensionProps<FeaturedDocsCardProps>) => React.JSX.Element;

/**
 * Breakpoint options for <CustomHomepageGridProps/>
 *
 * @public
 */
type Breakpoint = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
/**
 * Props customizing the <CustomHomepageGrid/> component.
 *
 * @public
 */
type CustomHomepageGridProps = {
    /**
     * Children contain all widgets user can configure on their own homepage.
     */
    children?: ReactNode;
    /**
     * Default layout for the homepage before users have modified it.
     */
    config?: LayoutConfiguration[];
    /**
     * Height of grid row in pixels.
     * @defaultValue 60
     */
    rowHeight?: number;
    /**
     * Screen width in pixels for different breakpoints.
     * @defaultValue theme breakpoints
     */
    breakpoints?: Record<Breakpoint, number>;
    /**
     * Number of grid columns for different breakpoints.
     * @defaultValue \{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 \}
     */
    cols?: Record<Breakpoint, number>;
    /**
     * Grid container padding (x, y) in pixels for all or specific breakpoints.
     * @defaultValue [0, 0]
     * @example [10, 10]
     * @example \{ lg: [10, 10] \}
     */
    containerPadding?: [number, number] | Record<Breakpoint, [number, number]>;
    /**
     * Grid container margin (x, y) in pixels for all or specific breakpoints.
     * @defaultValue [0, 0]
     * @example [10, 10]
     * @example \{ lg: [10, 10] \}
     */
    containerMargin?: [number, number] | Record<Breakpoint, [number, number]>;
    /**
     * Maximum number of rows user can have in the grid.
     * @defaultValue unlimited
     */
    maxRows?: number;
    /**
     * Custom style for grid.
     */
    style?: React__default.CSSProperties;
    /**
     * Compaction type of widgets in the grid. This controls where widgets are moved in case
     * they are overlapping in the grid.
     */
    compactType?: 'vertical' | 'horizontal' | null;
    /**
     * Controls if widgets can overlap in the grid. If true, grid can be placed one over the other.
     * @defaultValue false
     */
    allowOverlap?: boolean;
    /**
     * Controls if widgets can collide with each other. If true, grid items won't change position when being dragged over.
     * @defaultValue false
     */
    preventCollision?: boolean;
};
/**
 * Layout configuration that can be passed to the custom home page.
 *
 * @public
 */
type LayoutConfiguration = {
    component: ReactElement | string;
    x: number;
    y: number;
    width: number;
    height: number;
    movable?: boolean;
    deletable?: boolean;
    resizable?: boolean;
};

/**
 * A component that allows customizing components in home grid layout.
 *
 * @public
 */
declare const CustomHomepageGrid: (props: CustomHomepageGridProps) => React__default.JSX.Element;

/**
 * @public
 * Component responsible for listening to location changes and calling
 * the visitsApi to save visits.
 */
declare const VisitListener: ({ children, toEntityRef, visitName, }: {
    children?: React__default.ReactNode;
    toEntityRef?: (({ pathname }: {
        pathname: string;
    }) => string | undefined) | undefined;
    visitName?: (({ pathname }: {
        pathname: string;
    }) => string) | undefined;
}) => JSX.Element;

/** @public */
declare const TemplateBackstageLogo: (props: {
    classes: {
        svg: string;
        path: string;
    };
}) => React__default.JSX.Element;

/** @public */
declare const TemplateBackstageLogoIcon: () => React__default.JSX.Element;

/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
declare const createCardExtension: typeof createCardExtension$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardExtensionProps<T> = CardExtensionProps$1<T>;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardLayout = CardLayout$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardSettings = CardSettings$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type CardConfig = CardConfig$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type ComponentParts = ComponentParts$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type ComponentRenderer = ComponentRenderer$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
type RendererProps = RendererProps$1;
/**
 * @public
 * @deprecated Import from `@backstage/plugin-home-react` instead
 */
declare const SettingsModal: (props: {
    open: boolean;
    close: Function;
    componentName?: string | undefined;
    children: JSX.Element;
}) => React.JSX.Element;

<<<<<<< HEAD
export { Breakpoint, CardConfig, CardExtensionProps, CardLayout, CardSettings, ClockConfig, ComponentAccordion, ComponentParts, ComponentRenderer, ComponentTab, ComponentTabs, CustomHomepageGrid, CustomHomepageGridProps, FeaturedDocsCard, FeaturedDocsCardProps, HeaderWorldClock, HomePageCompanyLogo, HomePageRandomJoke, HomePageRecentlyVisited, HomePageStarredEntities, HomePageToolkit, HomePageTopVisited, HomepageCompositionRoot, LayoutConfiguration, Operators, RendererProps, SettingsModal, StarredEntitiesProps, TemplateBackstageLogo, TemplateBackstageLogoIcon, Tool, ToolkitContentProps, Visit, VisitListener, VisitedByTypeKind, VisitedByTypeProps, VisitsApi, VisitsApiQueryParams, VisitsApiSaveParams, VisitsStorageApi, VisitsStorageApiOptions, VisitsWebStorageApi, VisitsWebStorageApiOptions, WelcomeTitle, WelcomeTitleLanguageProps, createCardExtension, homePlugin, isOperator, visitsApiRef };
=======
export { type Breakpoint, type CardConfig, type CardExtensionProps, type CardLayout, type CardSettings, type ClockConfig, ComponentAccordion, type ComponentParts, type ComponentRenderer, ComponentTab, ComponentTabs, CustomHomepageGrid, type CustomHomepageGridProps, FeaturedDocsCard, type FeaturedDocsCardProps, HeaderWorldClock, HomePageCompanyLogo, HomePageRandomJoke, HomePageRecentlyVisited, HomePageStarredEntities, HomePageToolkit, HomePageTopVisited, HomepageCompositionRoot, type LayoutConfiguration, type Operators, type RendererProps, SettingsModal, type StarredEntitiesProps, TemplateBackstageLogo, TemplateBackstageLogoIcon, type Tool, type ToolkitContentProps, type Visit, VisitListener, type VisitedByTypeKind, type VisitedByTypeProps, type VisitsApi, type VisitsApiQueryParams, type VisitsApiSaveParams, VisitsStorageApi, type VisitsStorageApiOptions, VisitsWebStorageApi, type VisitsWebStorageApiOptions, WelcomeTitle, type WelcomeTitleLanguageProps, createCardExtension, homePlugin, isOperator, visitsApiRef };
>>>>>>> master
