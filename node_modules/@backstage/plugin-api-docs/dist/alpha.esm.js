import React from 'react';
<<<<<<< HEAD
import { Grid } from '@material-ui/core';
import { createNavItemExtension, createApiExtension, createApiFactory, createPageExtension, createSchemaFromZod, createPlugin } from '@backstage/frontend-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { useApp } from '@backstage/core-plugin-api';
import { createEntityCardExtension, createEntityContentExtension } from '@backstage/plugin-catalog-react/alpha';
import { RELATION_HAS_PART, parseEntityRef } from '@backstage/catalog-model';
import '@backstage/plugin-catalog-react';
import '@material-ui/lab';
import { r as rootRoute, a as apiDocsConfigRef, b as registerComponentRouteRef, d as defaultDefinitionWidgets } from './esm/ApiDefinitionWidget-798ee85f.esm.js';
import '@backstage/core-components';
import '@material-ui/core/Typography';
import '@material-ui/core/styles';

function ApiIcon() {
  const app = useApp();
  const KindApiSystemIcon = app.getSystemIcon("kind:api");
  return /* @__PURE__ */ React.createElement(KindApiSystemIcon, null);
}
const apiDocsNavItem = createNavItemExtension({
  title: "APIs",
  routeRef: convertLegacyRouteRef(rootRoute),
  icon: () => compatWrapper(/* @__PURE__ */ React.createElement(ApiIcon, null))
=======
import Grid from '@material-ui/core/Grid';
import { createNavItemExtension, createApiExtension, createApiFactory, createPageExtension, createSchemaFromZod, createPlugin } from '@backstage/frontend-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { createEntityCardExtension, createEntityContentExtension } from '@backstage/plugin-catalog-react/alpha';
import { RELATION_HAS_PART, parseEntityRef } from '@backstage/catalog-model';
import '@backstage/plugin-catalog-react';
import '@material-ui/lab/Alert';
import { r as rootRoute, a as apiDocsConfigRef, b as registerComponentRouteRef, d as defaultDefinitionWidgets } from './esm/ApiDefinitionWidget-B2Z_EBYd.esm.js';
import { AppIcon } from '@backstage/core-components';
import '@backstage/core-plugin-api';
import '@material-ui/core/Typography';
import '@material-ui/core/styles';

const apiDocsNavItem = createNavItemExtension({
  title: "APIs",
  routeRef: convertLegacyRouteRef(rootRoute),
  icon: () => compatWrapper(/* @__PURE__ */ React.createElement(AppIcon, { id: "kind:api" }))
>>>>>>> master
});
const apiDocsConfigApi = createApiExtension({
  factory: createApiFactory({
    api: apiDocsConfigRef,
    deps: {},
    factory: () => {
      const definitionWidgets = defaultDefinitionWidgets();
      return {
        getApiDefinitionWidget: (apiEntity) => {
          return definitionWidgets.find((d) => d.type === apiEntity.spec.type);
        }
      };
    }
  })
});
const apiDocsExplorerPage = createPageExtension({
  defaultPath: "/api-docs",
  routeRef: convertLegacyRouteRef(rootRoute),
  // Mapping DefaultApiExplorerPageProps to config
  configSchema: createSchemaFromZod(
    (z) => z.object({
      path: z.string().default("/api-docs"),
      initiallySelectedFilter: z.enum(["owned", "starred", "all"]).optional()
      // Ommiting columns and actions for now as their types are too complex to map to zod
    })
  ),
<<<<<<< HEAD
  loader: ({ config }) => import('./esm/index-435dfc01.esm.js').then(
=======
  loader: ({ config }) => import('./esm/index-DDxb-GVK.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(
      /* @__PURE__ */ React.createElement(
        m.ApiExplorerIndexPage,
        {
          initiallySelectedFilter: config.initiallySelectedFilter
        }
      )
    )
  )
});
const apiDocsHasApisEntityCard = createEntityCardExtension({
  name: "has-apis",
  // Ommiting configSchema for now
  // We are skipping variants and columns are too complex to map to zod
  // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
  filter: (entity) => {
    var _a;
    return entity.kind === "Component" && ((_a = entity.relations) == null ? void 0 : _a.some(
      ({ type, targetRef }) => type.toLocaleLowerCase("en-US") === RELATION_HAS_PART && parseEntityRef(targetRef).kind === "API"
    ));
  },
<<<<<<< HEAD
  loader: () => import('./esm/index-5f0727eb.esm.js').then(
=======
  loader: () => import('./esm/index-BREvzWXp.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasApisCard, null))
  )
});
const apiDocsDefinitionEntityCard = createEntityCardExtension({
  name: "definition",
  filter: "kind:api",
<<<<<<< HEAD
  loader: () => import('./esm/index-6f21bd2e.esm.js').then(
=======
  loader: () => import('./esm/index-BnvGScty.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ApiDefinitionCard, null))
  )
});
const apiDocsConsumedApisEntityCard = createEntityCardExtension({
  name: "consumed-apis",
  // Ommiting configSchema for now
  // We are skipping variants and columns are too complex to map to zod
  // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
  filter: "kind:component",
<<<<<<< HEAD
  loader: () => import('./esm/index-5f0727eb.esm.js').then(
=======
  loader: () => import('./esm/index-BREvzWXp.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ConsumedApisCard, null))
  )
});
const apiDocsProvidedApisEntityCard = createEntityCardExtension({
  name: "provided-apis",
  // Ommiting configSchema for now
  // We are skipping variants and columns are too complex to map to zod
  // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
  filter: "kind:component",
<<<<<<< HEAD
  loader: () => import('./esm/index-5f0727eb.esm.js').then(
=======
  loader: () => import('./esm/index-BREvzWXp.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ProvidedApisCard, null))
  )
});
const apiDocsConsumingComponentsEntityCard = createEntityCardExtension({
  name: "consuming-components",
  // Ommiting configSchema for now
  // We are skipping variants
  // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
  filter: "kind:api",
<<<<<<< HEAD
  loader: () => import('./esm/index-c969ed3d.esm.js').then(
=======
  loader: () => import('./esm/index-CEoQtSjl.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ConsumingComponentsCard, null))
  )
});
const apiDocsProvidingComponentsEntityCard = createEntityCardExtension({
  name: "providing-components",
  // Ommiting configSchema for now
  // We are skipping variants
  // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
  filter: "kind:api",
<<<<<<< HEAD
  loader: () => import('./esm/index-c969ed3d.esm.js').then(
=======
  loader: () => import('./esm/index-CEoQtSjl.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ProvidingComponentsCard, null))
  )
});
const apiDocsDefinitionEntityContent = createEntityContentExtension({
  name: "definition",
  defaultPath: "/defintion",
  defaultTitle: "Definition",
  filter: "kind:api",
<<<<<<< HEAD
  loader: async () => import('./esm/index-6f21bd2e.esm.js').then(
=======
  loader: async () => import('./esm/index-BnvGScty.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(
      /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ApiDefinitionCard, null)))
    )
  )
});
const apiDocsApisEntityContent = createEntityContentExtension({
  name: "apis",
  defaultPath: "/apis",
  defaultTitle: "APIs",
  filter: "kind:component",
<<<<<<< HEAD
  loader: async () => import('./esm/index-5f0727eb.esm.js').then(
=======
  loader: async () => import('./esm/index-BREvzWXp.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(
      /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, alignItems: "stretch" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ProvidedApisCard, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ConsumedApisCard, null)))
    )
  )
});
var alpha = createPlugin({
  id: "api-docs",
  routes: {
    root: convertLegacyRouteRef(rootRoute)
  },
  externalRoutes: {
    registerApi: convertLegacyRouteRef(registerComponentRouteRef)
  },
  extensions: [
    apiDocsNavItem,
    apiDocsConfigApi,
    apiDocsExplorerPage,
    apiDocsHasApisEntityCard,
    apiDocsDefinitionEntityCard,
    apiDocsProvidedApisEntityCard,
    apiDocsConsumedApisEntityCard,
    apiDocsConsumingComponentsEntityCard,
    apiDocsProvidingComponentsEntityCard,
    apiDocsDefinitionEntityContent,
    apiDocsApisEntityContent
  ]
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
