'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var pluginSearchBackendNode = require('@backstage/plugin-search-backend-node');
var alpha$1 = require('@backstage/plugin-search-backend-node/alpha');
<<<<<<< HEAD
var router = require('./cjs/router-2e81bbf7.cjs.js');
require('zod');
require('@backstage/errors');
require('@backstage/plugin-auth-node');
=======
var router = require('./cjs/router-BXom9ZEe.cjs.js');
require('zod');
require('@backstage/errors');
>>>>>>> master
require('@backstage/plugin-permission-common');
require('lodash');
require('qs');
require('dataloader');
require('@backstage/backend-openapi-utils');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class SearchIndexRegistry {
  constructor() {
    __publicField(this, "collators", []);
    __publicField(this, "decorators", []);
  }
  addCollator(options) {
    this.collators.push(options);
  }
  addDecorator(options) {
    this.decorators.push(options);
  }
  getCollators() {
    return this.collators;
  }
  getDecorators() {
    return this.decorators;
  }
}
class SearchEngineRegistry {
  constructor() {
    __publicField(this, "searchEngine", null);
  }
  setSearchEngine(searchEngine) {
    if (this.searchEngine) {
      throw new Error("Multiple Search engines is not supported at this time");
    }
    this.searchEngine = searchEngine;
  }
  getSearchEngine() {
    return this.searchEngine;
  }
}
var alpha = backendPluginApi.createBackendPlugin({
  pluginId: "search",
  register(env) {
    const searchIndexRegistry = new SearchIndexRegistry();
    env.registerExtensionPoint(
      alpha$1.searchIndexRegistryExtensionPoint,
      searchIndexRegistry
    );
    const searchEngineRegistry = new SearchEngineRegistry();
    env.registerExtensionPoint(
      alpha$1.searchEngineRegistryExtensionPoint,
      searchEngineRegistry
    );
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
<<<<<<< HEAD
        permissions: backendPluginApi.coreServices.permissions,
        http: backendPluginApi.coreServices.httpRouter,
        searchIndexService: alpha$1.searchIndexServiceRef
      },
      async init({ config, logger, permissions, http, searchIndexService }) {
=======
        discovery: backendPluginApi.coreServices.discovery,
        permissions: backendPluginApi.coreServices.permissions,
        auth: backendPluginApi.coreServices.auth,
        http: backendPluginApi.coreServices.httpRouter,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        searchIndexService: alpha$1.searchIndexServiceRef
      },
      async init({
        config,
        logger,
        discovery,
        permissions,
        auth,
        http,
        httpAuth,
        searchIndexService
      }) {
>>>>>>> master
        let searchEngine = searchEngineRegistry.getSearchEngine();
        if (!searchEngine) {
          searchEngine = new pluginSearchBackendNode.LunrSearchEngine({
            logger: backendCommon.loggerToWinstonLogger(logger)
          });
        }
        const collators = searchIndexRegistry.getCollators();
        const decorators = searchIndexRegistry.getDecorators();
        await searchIndexService.start({
          searchEngine,
          collators,
          decorators
        });
        const router$1 = await router.createRouter({
          config,
<<<<<<< HEAD
          permissions,
=======
          discovery,
          permissions,
          auth,
          httpAuth,
>>>>>>> master
          logger: backendCommon.loggerToWinstonLogger(logger),
          engine: searchEngine,
          types: searchIndexService.getDocumentTypes()
        });
        http.use(router$1);
      }
    });
  }
});

<<<<<<< HEAD
exports["default"] = alpha;
=======
exports.default = alpha;
>>>>>>> master
//# sourceMappingURL=alpha.cjs.js.map
