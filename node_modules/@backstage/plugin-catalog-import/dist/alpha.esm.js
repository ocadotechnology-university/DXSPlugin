import { createApiFactory, discoveryApiRef, identityApiRef, configApiRef } from '@backstage/core-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { createPageExtension, createApiExtension, createPlugin } from '@backstage/frontend-plugin-api';
import { scmAuthApiRef, scmIntegrationsApiRef } from '@backstage/integration-react';
import React from 'react';
<<<<<<< HEAD
import { r as rootRouteRef, a as catalogImportApiRef, b as CatalogImportClient } from './esm/plugin-5ca30662.esm.js';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import '@octokit/rest';
import 'js-base64';
=======
import { r as rootRouteRef, a as catalogImportApiRef, b as CatalogImportClient } from './esm/plugin-_ZVWmjOr.esm.js';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import '@octokit/rest';
import 'js-base64';
import 'yaml';
>>>>>>> master
import 'git-url-parse';

const catalogImportPage = createPageExtension({
  defaultPath: "/catalog-import",
  routeRef: convertLegacyRouteRef(rootRouteRef),
<<<<<<< HEAD
  loader: () => import('./esm/index-6cc6851a.esm.js').then(
=======
  loader: () => import('./esm/index-ClJNUA7x.esm.js').then(
>>>>>>> master
    (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ImportPage, null))
  )
});
const catalogImportApi = createApiExtension({
  factory: createApiFactory({
    api: catalogImportApiRef,
    deps: {
      discoveryApi: discoveryApiRef,
      scmAuthApi: scmAuthApiRef,
      identityApi: identityApiRef,
      scmIntegrationsApi: scmIntegrationsApiRef,
      catalogApi: catalogApiRef,
      configApi: configApiRef
    },
    factory: ({
      discoveryApi,
      scmAuthApi,
      identityApi,
      scmIntegrationsApi,
      catalogApi,
      configApi
    }) => new CatalogImportClient({
      discoveryApi,
      scmAuthApi,
      scmIntegrationsApi,
      identityApi,
      catalogApi,
      configApi
    })
  })
});
var alpha = createPlugin({
  id: "catalog-import",
  extensions: [catalogImportApi, catalogImportPage],
  routes: {
    importPage: convertLegacyRouteRef(rootRouteRef)
  }
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
