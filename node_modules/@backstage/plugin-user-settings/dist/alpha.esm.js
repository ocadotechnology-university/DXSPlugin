import { createPageExtension, createExtensionInput, coreExtensionData, createNavItemExtension, createPlugin } from '@backstage/frontend-plugin-api';
import { convertLegacyRouteRef, compatWrapper, convertLegacyRouteRefs } from '@backstage/core-compat-api';
import SettingsIcon from '@material-ui/icons/Settings';
<<<<<<< HEAD
import { s as settingsRouteRef } from './esm/translation-bd96c6ff.esm.js';
export { a as userSettingsTranslationRef } from './esm/translation-bd96c6ff.esm.js';
=======
import { s as settingsRouteRef } from './esm/translation-CSRNIDi0.esm.js';
export { u as userSettingsTranslationRef } from './esm/translation-CSRNIDi0.esm.js';
>>>>>>> master
import React from 'react';
import '@backstage/core-plugin-api';
import '@backstage/core-plugin-api/alpha';

const userSettingsPage = createPageExtension({
  defaultPath: "/settings",
  routeRef: convertLegacyRouteRef(settingsRouteRef),
  inputs: {
    providerSettings: createExtensionInput(
      {
        element: coreExtensionData.reactElement
      },
      { singleton: true, optional: true }
    )
  },
<<<<<<< HEAD
  loader: ({ inputs }) => import('./esm/index-2ff38412.esm.js').then(
=======
  loader: ({ inputs }) => import('./esm/index-Cq4DqL_j.esm.js').then(
>>>>>>> master
    (m) => {
      var _a;
      return compatWrapper(
        /* @__PURE__ */ React.createElement(
          m.SettingsPage,
          {
            providerSettings: (_a = inputs.providerSettings) == null ? void 0 : _a.output.element
          }
        )
      );
    }
  )
});
const settingsNavItem = createNavItemExtension({
  routeRef: convertLegacyRouteRef(settingsRouteRef),
  title: "Settings",
  icon: SettingsIcon
});
var alpha = createPlugin({
  id: "user-settings",
  extensions: [userSettingsPage, settingsNavItem],
  routes: convertLegacyRouteRefs({
    root: settingsRouteRef
  })
});

export { alpha as default, settingsNavItem };
//# sourceMappingURL=alpha.esm.js.map
