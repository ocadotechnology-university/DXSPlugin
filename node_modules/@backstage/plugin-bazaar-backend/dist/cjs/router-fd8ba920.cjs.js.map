{"version":3,"file":"router-fd8ba920.cjs.js","sources":["../../src/service/DatabaseHandler.ts","../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginDatabaseManager,\n  resolvePackagePath,\n} from '@backstage/backend-common';\nimport { Knex } from 'knex';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-bazaar-backend',\n  'migrations',\n);\n\ntype Options = {\n  database: PluginDatabaseManager;\n};\n\nexport class DatabaseHandler {\n  static async create(options: Options): Promise<DatabaseHandler> {\n    const { database } = options;\n    const client = await database.getClient();\n\n    if (!database.migrations?.skip) {\n      await client.migrate.latest({\n        directory: migrationsDir,\n      });\n    }\n\n    return new DatabaseHandler(client);\n  }\n\n  private readonly client: Knex;\n\n  private constructor(client: Knex) {\n    this.client = client;\n  }\n\n  private columns = [\n    'metadata.id',\n    'metadata.entity_ref',\n    'metadata.title',\n    'metadata.description',\n    'metadata.status',\n    'metadata.updated_at',\n    'metadata.community',\n    'metadata.size',\n    'metadata.start_date',\n    'metadata.end_date',\n    'metadata.responsible',\n    'metadata.docs',\n  ];\n\n  async getMembers(id: string) {\n    return await this.client.select('*').from('members').where({ item_id: id });\n  }\n\n  async addMember(\n    id: number,\n    userId: string,\n    userRef?: string,\n    picture?: string,\n  ) {\n    await this.client\n      .insert({\n        item_id: id,\n        user_id: userId,\n        user_ref: userRef,\n        picture: picture,\n      })\n      .into('members');\n  }\n\n  async deleteMember(id: number, userId: string) {\n    return await this.client('members')\n      .where({ item_id: id })\n      .andWhere('user_id', userId)\n      .del();\n  }\n\n  async getMetadataById(id: number) {\n    const coalesce = this.client.raw(\n      'coalesce(count(members.item_id), 0) as members_count',\n    );\n\n    return await this.client('metadata')\n      .select([...this.columns, coalesce])\n      .where({ 'metadata.id': id })\n      .groupBy(this.columns)\n      .leftJoin('members', 'metadata.id', '=', 'members.item_id');\n  }\n\n  async getMetadataByRef(entityRef: string) {\n    const coalesce = this.client.raw(\n      'coalesce(count(members.item_id), 0) as members_count',\n    );\n\n    return await this.client('metadata')\n      .select([...this.columns, coalesce])\n      .where({ 'metadata.entity_ref': entityRef })\n      .groupBy(this.columns)\n      .leftJoin('members', 'metadata.id', '=', 'members.item_id');\n  }\n\n  async insertMetadata(bazaarProject: any) {\n    const {\n      title,\n      entityRef,\n      community,\n      description,\n      docs,\n      status,\n      size,\n      startDate,\n      endDate,\n      responsible,\n    } = bazaarProject;\n\n    await this.client\n      .insert({\n        title,\n        entity_ref: entityRef,\n        community,\n        description,\n        docs,\n        status,\n        updated_at: new Date().toISOString(),\n        size,\n        start_date: startDate,\n        end_date: endDate,\n        responsible,\n      })\n      .into('metadata');\n  }\n\n  async updateMetadata(bazaarProject: any) {\n    const {\n      title,\n      id,\n      entityRef,\n      community,\n      description,\n      docs,\n      status,\n      size,\n      startDate,\n      endDate,\n      responsible,\n    } = bazaarProject;\n\n    return await this.client('metadata').where({ id: id }).update({\n      title,\n      entity_ref: entityRef,\n      description,\n      community,\n      docs,\n      status,\n      updated_at: new Date().toISOString(),\n      size,\n      start_date: startDate,\n      end_date: endDate,\n      responsible,\n    });\n  }\n\n  async deleteMetadata(id: number) {\n    return await this.client('metadata').where({ id: id }).del();\n  }\n\n  async getProjects(limit?: number, order?: string) {\n    const coalesce = this.client.raw(\n      'coalesce(count(members.item_id), 0) as members_count',\n    );\n    let get = this.client('metadata')\n      .select([...this.columns, coalesce])\n      .groupBy(this.columns);\n    if (limit) {\n      get = get.limit(limit);\n    }\n    if (order === 'latest') {\n      get = get.orderByRaw('id desc');\n    }\n    if (order === 'random') {\n      get = get.orderByRaw('RANDOM()');\n    }\n    return await get.leftJoin('members', 'metadata.id', '=', 'members.item_id');\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler, PluginDatabaseManager } from '@backstage/backend-common';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { Config } from '@backstage/config';\nimport { IdentityApi } from '@backstage/plugin-auth-node';\nimport { DatabaseHandler } from './DatabaseHandler';\n\n/** @public */\nexport interface RouterOptions {\n  logger: Logger;\n  database: PluginDatabaseManager;\n  config: Config;\n  identity: IdentityApi;\n}\n\n/** @public */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger, database, identity } = options;\n\n  const dbHandler = await DatabaseHandler.create({ database });\n\n  logger.info('Initializing Bazaar backend');\n\n  const router = Router();\n  router.use(express.json());\n\n  router.get('/projects/:id/members', async (request, response) => {\n    const members = await dbHandler.getMembers(request.params.id);\n\n    if (members?.length) {\n      response.json({ status: 'ok', data: members });\n    } else {\n      response.json({ status: 'ok', data: [] });\n    }\n  });\n\n  router.put('/projects/:id/member/:userId', async (request, response) => {\n    const { id, userId } = request.params;\n    const user = await identity.getIdentity({ request: request });\n\n    await dbHandler.addMember(\n      parseInt(id, 10),\n      userId,\n      user?.identity.userEntityRef,\n      request.body?.picture,\n    );\n\n    response.json({ status: 'ok' });\n  });\n\n  router.delete('/projects/:id/member/:userId', async (request, response) => {\n    const { id, userId } = request.params;\n\n    const count = await dbHandler.deleteMember(parseInt(id, 10), userId);\n\n    if (count) {\n      response.json({ status: 'ok' });\n    } else {\n      response.status(404).json({ message: 'Record not found' });\n    }\n  });\n\n  router.get('/projects/:idOrRef', async (request, response) => {\n    const idOrRef = decodeURIComponent(request.params.idOrRef);\n    let data;\n\n    if (/^-?\\d+$/.test(idOrRef)) {\n      data = await dbHandler.getMetadataById(parseInt(idOrRef, 10));\n    } else {\n      data = await dbHandler.getMetadataByRef(idOrRef);\n    }\n\n    response.json({ status: 'ok', data: data });\n  });\n\n  router.get('/projects', async (request, response) => {\n    const limit = request.query.limit?.toString();\n    const order = request.query.order?.toString();\n\n    const data = await dbHandler.getProjects(\n      limit ? parseInt(limit, 10) : undefined,\n      order,\n    );\n\n    response.json({ status: 'ok', data: data });\n  });\n\n  router.put('/projects', async (request, response) => {\n    const bazaarProject = request.body;\n\n    const count = await dbHandler.updateMetadata(bazaarProject);\n\n    if (count) {\n      response.json({ status: 'ok' });\n    }\n  });\n\n  router.post('/projects', async (request, response) => {\n    const bazaarProject = request.body;\n\n    await dbHandler.insertMetadata(bazaarProject);\n    response.json({ status: 'ok' });\n  });\n\n  router.delete('/projects/:id', async (request, response) => {\n    const id = decodeURIComponent(request.params.id);\n\n    const count = await dbHandler.deleteMetadata(parseInt(id, 10));\n\n    if (count) {\n      response.json({ status: 'ok' });\n    } else {\n      response.status(404).json({ message: 'Record not found' });\n    }\n  });\n\n  router.use(errorHandler());\n  return router;\n}\n"],"names":["resolvePackagePath","Router","express","errorHandler"],"mappings":"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"}